/*
 * File: FScalar.java
 * 
 * Copyright (C) 2014 FriendlySNMP.org; All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301  USA
 * 
 * $Id: FScalar.java,v 1.35 2014/01/11 02:19:23 mg Exp $
 */
package org.friendlysnmp;

import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import org.friendlysnmp.event.FExceptionListener;
import org.friendlysnmp.event.FScalarGetListener;
import org.friendlysnmp.event.FScalarSetListener;
import org.friendlysnmp.event.FScalarValidationListener;
import org.friendlysnmp.persist.PersistEntryScalar;
import org.friendlysnmp.persist.PersistStorage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.snmp4j.agent.MOScope;
import org.snmp4j.agent.MOServerLookupEvent;
import org.snmp4j.agent.ManagedObject;
import org.snmp4j.agent.mo.MOChangeEvent;
import org.snmp4j.agent.mo.MOChangeListener;
import org.snmp4j.agent.mo.MOScalar;
import org.snmp4j.agent.mo.MOValueValidationEvent;
import org.snmp4j.agent.mo.MOValueValidationListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.Variable;

/**
 * This class hides access to <code>org.snmp4j.agent.mo.MOScalar</code> 
 * <br>
 * The objects of this class are generated by FriendlyPro tool. 
 * 
 * @version $Revision: 1.35 $
 */
public class FScalar extends FValueNode {
    /**
     * Logger object
     */
    private static final Logger logger = LoggerFactory.getLogger(FScalar.class);

    /**
     * Underlying SNMP4j managed object.
     */
    private MOScalar moScalar;

    /**
     * Last GET request was received at this timestamp. 
     */
    private long lastGetTime;
    
    /**
     * Scalar GET listeners. 
     */
    protected Set<FScalarGetListener> hsGetListener;
    
    /**
     * Scalar SET listeners. 
     */
    protected Set<FScalarSetListener> hsSetListener;
    
    /**
     * Scalar VALIDATION listeners. 
     */
    protected Set<FScalarValidationListener> hsValidationListener;
    
    /**
     * Constructor.
     * 
     * @param name node name as it is declared in a MIB file.
     * @param moScalar scalar managed object.
     * @param agent agent.
     */
    public FScalar(String name, MOScalar moScalar, AgentWorker agent) {
        super(name, moScalar.getOid());
        this.moScalar = moScalar;
        hsGetListener = new CopyOnWriteArraySet<FScalarGetListener>();
        hsSetListener = new CopyOnWriteArraySet<FScalarSetListener>();
        hsValidationListener = new CopyOnWriteArraySet<FScalarValidationListener>();
        moScalar.addMOChangeListener(new ThisMOChangeListener());
        moScalar.addMOValueValidationListener(new ThisMOValueValidationListener());
        setAgent(agent); // hook up GET event to the scalar
    } // FScalar()
    
    @Override
    public void setAgent(AgentWorker agent) {
        super.setAgent(agent);
        ServerLookupAdapter listener = new ServerLookupAdapter() {
            @Override
            public void queryEvent(MOServerLookupEvent event) {
                fireGetEvent();
            }
        };
        agent.getServer().addLookupListener(listener, moScalar);
    } // setAgent()
    
    /** 
     * {@inheritDoc}
     *
     * @see org.friendlysnmp.FValueNode#setVolatilePrivate(boolean)
     */
    @Override
    protected void setVolatilePrivate(boolean isVolatile) {
        moScalar.setVolatile(isVolatile);
    } // setVolatilePrivate()

    /** 
     * {@inheritDoc}
     *
     * @see org.friendlysnmp.FValueNode#isVolatile()
     */
    @Override
    public boolean isVolatile() {
        return moScalar.isVolatile();
    }
    
    /**
     * Returns SNMP4J underlying managed object.
     * 
     * @return the <code>org.snmp4j.agent.mo.MOScalar</code> object this class
     * is representing.
     */
    public MOScalar getMOScalar() {
        return moScalar;
    } // getMOScalar()

    /** 
     * {@inheritDoc}
     *
     * @see org.friendlysnmp.FValueNode#loadPersistValue()
     */
    @Override
    protected void loadPersistValue() {
        PersistStorage storage = getPersistStorage();
        PersistEntryScalar entry = storage.getPersistScalar(getFID());
        if (entry != null) {
            try {
                persistLoaded = entry.loadPersist2Scalar(this); // does not throw
                if (!persistLoaded) {
                    storage.remove(entry.getFID()); // throws
                }
            } catch (FException e) {
                logger.error(ThrowableFormatter.format(
                        "Failure to load persistent scalar " + getFID(), e));
            }
        }
    } // loadPersistValue()
    
    /**
     * Sets scalar managed object value.
     * 
     * @param obj new value to set .
     * @throws FException 
     */
    public void setValue(Object obj) throws FException {
        int result = moScalar.setValue(FConverter.toVariable(obj, moScalar));
        if (result != SnmpConstants.SNMP_ERROR_SUCCESS) {
            throwFException("Failure to set value: " + ValueValidation.find(result));
        }
        if (logger.isDebugEnabled()) {
            logger.debug(String.format("Updated %s: %s", getFIDtoString(), obj));
        }
    } // setValue()
    
    /**
     * Sets scalar managed object value. 
     * <p>Exception is reported to listeners registered with the agent.
     * 
     * @param obj new value to set.
     * 
     * @see FExceptionListener
     */
    public void setValueEx(Object obj) {
        try {
            setValue(obj);
        } catch (FException e) {
            agent.exceptionThrown(String.format(
                    "Failure to setValue() for scalar %s value='%s'", 
                    getFIDtoString(), obj), e);
        }
    } // setValueEx()
    
    /**
     * Returns value of the scalar managed object.
     * 
     * @return Java basic object like String, Integer, and so on.
     * @see FConverter
     */
    public Object getValue() {
        return FConverter.toJava(moScalar.getValue());
    } // getValue()
    
    /**
     * Returns syntax of the scalar value.
     * 
     * @return syntax of the scalar value.
     */
    public ValueSyntax getSyntax() {
        Variable value = moScalar.getValue();
        return (value == null ? ValueSyntax.NULL : ValueSyntax.find(value.getSyntax()));
    }
    
    /**
     * Returns a string representation of the object.
     * 
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return String.format("%s Value=%s", getFIDtoString(), getValue());
    } // toString()
    
    //--------------------------------separator--------------------------------
    static int ______EVENTS;

    public void addGetListener(FScalarGetListener l) {
        hsGetListener.add(l);
    } // addGetListener()
    
    public void removeGetListener(FScalarGetListener l) {
        hsGetListener.remove(l);
    } // removeGetListener()
    
    /**
     * Registers the given observer to begin receiving "changed value" events
     * when changes are made to the managed object.
     *
     * @param l the observer to register.
     */
    public void addSetListener(FScalarSetListener l) {
        hsSetListener.add(l);
    } // addSetListener()
    
    /**
     * Unregisters the given observer from the notification list so it will 
     * no longer receive change updates.
     * 
     * @param l the observer to unregister.
     */
    public void removeSetListener(FScalarSetListener l) {
        hsSetListener.remove(l);
    } // removeSetListener()
    
    /**
     * Registers the given observer to begin receiving "validation" events
     * when changes are made to the managed object.
     *
     * @param l the observer to register.
     */
    public void addValidationListener(FScalarValidationListener l) {
        hsValidationListener.add(l);
    } // addValidationListener()
    
    /**
     * Unregisters the given observer to stop receiving "validation" events
     * when changes are made to the managed object.
     *
     * @param l the observer to unregister.
     */
    public void removeValidationListener(FScalarValidationListener l) {
        hsValidationListener.remove(l);
    } // removeValidationListener()
    
    /**
     * Fires GET event
     */
    private synchronized void fireGetEvent() {
        long now = System.currentTimeMillis();
        long ignoreUpdate = agent.getIgnoreUpdateMs();
        if (now - lastGetTime > ignoreUpdate  &&  hsGetListener.size() > 0) {
            lastGetTime = now;
            if (logger.isDebugEnabled()) {
                logger.debug("FIRE GET request for " + getFIDtoString());
            }
            for (FScalarGetListener l : hsGetListener) {
                l.get(this);
            }
        }
    } // fireGetEvent()
    
    /**
     * Fires SET event
     * 
     * @param oid OID
     */
    private synchronized void fireSetEvent(OID oid) {
        if (logger.isDebugEnabled()) {
            logger.debug("FIRE SET event for " + getFIDtoString());
        }
        // 1. Fire "set" event to registered listeners
        for (FScalarSetListener l : hsSetListener) {
            l.set(this);
        }
        // 2. Persistence
        if (!moScalar.isVolatile()) {
            try {
                agent.getPersistStorage().put(this);
                if (logger.isDebugEnabled()) {
                    logger.debug("Persisting scalar: " + this);
                }
            } catch (FException e) {
                agent.exceptionThrown("Failure to persist scalar " + getFIDtoString(), e);
            }
        }
    } // fireSetEvent()

    /**
     * Fires validation event
     * 
     * @param objNewValue new value is in validation process
     * @return validation result
     * 
     * @see ValueValidation
     */
    private synchronized ValueValidation fireValidationEvent(Object objNewValue) {
        for (FScalarValidationListener l : hsValidationListener) {
            ValueValidation validation = l.validate(this, objNewValue);
            if (validation != ValueValidation.SUCCESS) {
                if (logger.isDebugEnabled()) {
                    logger.debug(String.format(
                        "Validation failed: %s NewValue=%s Scalar=%s",
                        validation, objNewValue, getFIDtoString()));
                }
                return validation;
            }
        }
        return ValueValidation.SUCCESS;
    } // fireValidationEvent()    
    
    /**
     * Implementation of <code>MOChangeListener</code>
     */
    private class ThisMOChangeListener implements MOChangeListener {
        /** 
         * Implementation of <code>MOChangeListener</code>
         *  
         * @param e managed object change event
         */
        public void beforePrepareMOChange(MOChangeEvent e) { }
        /** 
         * Implementation of <code>MOChangeListener</code> 
         *  
         * @param e managed object change event
         */
        public void afterPrepareMOChange(MOChangeEvent e) { }
        /** 
         * Implementation of <code>MOChangeListener</code> 
         *  
         * @param e managed object change event
         */
        public void beforeMOChange(MOChangeEvent e) { }
        /** 
         * Implementation of <code>MOChangeListener</code> 
         *  
         * @param e managed object change event
         */
        public void afterMOChange(MOChangeEvent e) {
            ManagedObject mo = e.getChangedObject();
            MOScope scope = mo.getScope();
            OID oid = mo.find(scope);
            if (logger.isDebugEnabled()) {
                logger.debug(String.format(
                        "Event CHANGE 'afterMOChange': %s Scalar: %s", 
                        oid, getFIDtoString()));
            }
            fireSetEvent(oid);
        }
    } // inner class ThisMOChangeListener

    /**
     * Implementation of <code>MOValueValidationListener</code>
     */
    private class ThisMOValueValidationListener implements MOValueValidationListener {
        /** 
         * Implementation of <code>MOValueValidationListener</code> 
         *  
         * @param e managed object value validation event
         */
        public void validate(MOValueValidationEvent e) {
            Variable varNew = e.getNewValue();
            Object objNew = FConverter.toJava(varNew);
            if (logger.isDebugEnabled()) {
                logger.debug(String.format(
                        "Event VALIDATION %s; new value: %s", 
                        getFIDtoString(), objNew));
            }
            int denyReason = fireValidationEvent(objNew).toInt();
            e.setValidationStatus(denyReason);
        }
    } // inner class ThisMOValueValidationListener

} // class FScalar
