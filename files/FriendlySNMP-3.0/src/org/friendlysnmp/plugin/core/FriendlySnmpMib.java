 
//--AgentGen BEGIN=_BEGIN
// This file is generated by AgenPro
package org.friendlysnmp.plugin.core;
//--AgentGen END

import org.snmp4j.smi.*;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.agent.*;
import org.snmp4j.agent.mo.*;
import org.snmp4j.agent.mo.snmp.*;
import org.snmp4j.agent.mo.snmp.smi.*;
import org.snmp4j.agent.request.*;
import org.snmp4j.log.LogFactory;
import org.snmp4j.log.LogAdapter;
import org.snmp4j.agent.mo.snmp.tc.*;


//--AgentGen BEGIN=_IMPORT
@SuppressWarnings({"unused", "rawtypes"})
//--AgentGen END

public class FriendlySnmpMib 
//--AgentGen BEGIN=_EXTENDS
//--AgentGen END
implements MOGroup 
//--AgentGen BEGIN=_IMPLEMENTS
//--AgentGen END
{

  private static final LogAdapter LOGGER = 
      LogFactory.getLogger(FriendlySnmpMib.class);

//--AgentGen BEGIN=_STATIC
//--AgentGen END

  // Factory
  private MOFactory moFactory = 
    DefaultMOFactory.getInstance();

  // Constants 

  /**
   * OID of this MIB module for usage which can be 
   * used for its identification.
   */
  public static final OID oidFriendlySnmpMib =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1 });

  // Identities
  // Scalars
  public static final OID oidShutdownApp = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,3,0 });
  public static final OID oidExceptionViewPolicy = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,20,0 });
  public static final OID oidExceptionViewFixedIndex = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,21,0 });
  public static final OID oidDeadlockCheckInterval = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,30,0 });
  public static final OID oidDeadlockViewPolicy = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,32,0 });
  public static final OID oidDeadlockViewFixedIndex = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,33,0 });
  // Tables

  // Notifications
  public static final OID oidAppStop =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,0,1 });   

  public static final OID oidAppShutdown =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,0,2 });   

  public static final OID oidAppExceptionCaught =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,0,3 });   

  public static final OID oidAppExceptionUncaught =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,0,4 });   

  public static final OID oidAppDeadlock =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,0,5 });   


  // Enumerations




  // TextualConventions
  private static final String TC_MODULE_SNMPV2_TC = "SNMPv2-TC";
  private static final String TC_MODULE_FRIENDLY_SNMP_MIB = "FRIENDLY-SNMP-MIB";
  private static final String TC_FRIENDLYROWKEEPDELETEACTIONTC = "FriendlyRowKeepDeleteActionTC";
  private static final String TC_FRIENDLYVIEWPOLICYTC = "FriendlyViewPolicyTC";
  private static final String TC_FRIENDLYEXCEPTIONTYPETC = "FriendlyExceptionTypeTC";
  private static final String TC_DISPLAYSTRING = "DisplayString";

  // Scalars
  private MOScalar<OctetString> shutdownApp;
  private MOScalar<Integer32> exceptionViewPolicy;
  private MOScalar<UnsignedInteger32> exceptionViewFixedIndex;
  private MOScalar<UnsignedInteger32> deadlockCheckInterval;
  private MOScalar<Integer32> deadlockViewPolicy;
  private MOScalar<UnsignedInteger32> deadlockViewFixedIndex;

  // Tables
  public static final OID oidAppInfoEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,10,1 });

  // Index OID definitions
  public static final OID oidAppInfoIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,10,1,1 });

  // Column TC definitions for appInfoEntry:
  public static final String tcModuleSNMPv2Tc = "SNMPv2-TC";
  public static final String tcDefDisplayString = "DisplayString";
    
  // Column sub-identifier definitions for appInfoEntry:
  public static final int colAppInfoName = 2;
  public static final int colAppInfoDesc = 3;

  // Column index definitions for appInfoEntry:
  public static final int idxAppInfoName = 0;
  public static final int idxAppInfoDesc = 1;

  private MOTableSubIndex[] appInfoEntryIndexes;
  private MOTableIndex appInfoEntryIndex;
  
  private MOTable<AppInfoEntryRow,
                  MOColumn,
                  MOTableModel<AppInfoEntryRow>> appInfoEntry;
  private MOTableModel<AppInfoEntryRow> appInfoEntryModel;
  public static final OID oidAppDependenciesEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,11,1 });

  // Index OID definitions
  public static final OID oidAppDependenciesIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,11,1,1 });

  // Column TC definitions for appDependenciesEntry:
    
  // Column sub-identifier definitions for appDependenciesEntry:
  public static final int colAppDependenciesName = 2;
  public static final int colAppDependenciesDesc = 3;

  // Column index definitions for appDependenciesEntry:
  public static final int idxAppDependenciesName = 0;
  public static final int idxAppDependenciesDesc = 1;

  private MOTableSubIndex[] appDependenciesEntryIndexes;
  private MOTableIndex appDependenciesEntryIndex;
  
  private MOTable<AppDependenciesEntryRow,
                  MOColumn,
                  MOTableModel<AppDependenciesEntryRow>> appDependenciesEntry;
  private MOTableModel<AppDependenciesEntryRow> appDependenciesEntryModel;
  public static final OID oidAppPropEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,12,1 });

  // Index OID definitions
  public static final OID oidAppPropIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,12,1,1 });

  // Column TC definitions for appPropEntry:
    
  // Column sub-identifier definitions for appPropEntry:
  public static final int colAppPropKey = 2;
  public static final int colAppPropValue = 3;

  // Column index definitions for appPropEntry:
  public static final int idxAppPropKey = 0;
  public static final int idxAppPropValue = 1;

  private MOTableSubIndex[] appPropEntryIndexes;
  private MOTableIndex appPropEntryIndex;
  
  private MOTable<AppPropEntryRow,
                  MOColumn,
                  MOTableModel<AppPropEntryRow>> appPropEntry;
  private MOTableModel<AppPropEntryRow> appPropEntryModel;
  public static final OID oidAppConfigEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,13,1 });

  // Index OID definitions
  public static final OID oidAppConfigIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,13,1,1 });

  // Column TC definitions for appConfigEntry:
    
  // Column sub-identifier definitions for appConfigEntry:
  public static final int colAppConfigKey = 2;
  public static final int colAppConfigValue = 3;

  // Column index definitions for appConfigEntry:
  public static final int idxAppConfigKey = 0;
  public static final int idxAppConfigValue = 1;

  private MOTableSubIndex[] appConfigEntryIndexes;
  private MOTableIndex appConfigEntryIndex;
  
  private MOTable<AppConfigEntryRow,
                  MOColumn,
                  MOTableModel<AppConfigEntryRow>> appConfigEntry;
  private MOTableModel<AppConfigEntryRow> appConfigEntryModel;
  public static final OID oidSysPropEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,14,1 });

  // Index OID definitions
  public static final OID oidSysPropIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,1,14,1,1 });

  // Column TC definitions for sysPropEntry:
    
  // Column sub-identifier definitions for sysPropEntry:
  public static final int colSysPropKey = 2;
  public static final int colSysPropValue = 3;

  // Column index definitions for sysPropEntry:
  public static final int idxSysPropKey = 0;
  public static final int idxSysPropValue = 1;

  private MOTableSubIndex[] sysPropEntryIndexes;
  private MOTableIndex sysPropEntryIndex;
  
  private MOTable<SysPropEntryRow,
                  MOColumn,
                  MOTableModel<SysPropEntryRow>> sysPropEntry;
  private MOTableModel<SysPropEntryRow> sysPropEntryModel;
  public static final OID oidExceptionsListEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,10,1 });

  // Index OID definitions
  public static final OID oidExceptionsListIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,10,1,1 });

  // Column TC definitions for exceptionsListEntry:
  public static final String tcModuleFriendlySnmpMib = "FRIENDLY-SNMP-MIB";
  public static final String tcDefFriendlyExceptionTypeTC = "FriendlyExceptionTypeTC";
  public static final String tcDefFriendlyRowKeepDeleteActionTC = "FriendlyRowKeepDeleteActionTC";
    
  // Column sub-identifier definitions for exceptionsListEntry:
  public static final int colExceptionsListCount = 2;
  public static final int colExceptionsListType = 3;
  public static final int colExceptionsListLastOccur = 4;
  public static final int colExceptionsListMessage = 5;
  public static final int colExceptionsListClass = 6;
  public static final int colExceptionsListThread = 7;
  public static final int colExceptionsListAction = 8;

  // Column index definitions for exceptionsListEntry:
  public static final int idxExceptionsListCount = 0;
  public static final int idxExceptionsListType = 1;
  public static final int idxExceptionsListLastOccur = 2;
  public static final int idxExceptionsListMessage = 3;
  public static final int idxExceptionsListClass = 4;
  public static final int idxExceptionsListThread = 5;
  public static final int idxExceptionsListAction = 6;

  private MOTableSubIndex[] exceptionsListEntryIndexes;
  private MOTableIndex exceptionsListEntryIndex;
  
  private MOTable<ExceptionsListEntryRow,
                  MOColumn,
                  MOTableModel<ExceptionsListEntryRow>> exceptionsListEntry;
  private MOTableModel<ExceptionsListEntryRow> exceptionsListEntryModel;
  public static final OID oidExceptionViewEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,22,1 });

  // Index OID definitions
  public static final OID oidExceptionIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,22,1,1 });

  // Column TC definitions for exceptionViewEntry:
    
  // Column sub-identifier definitions for exceptionViewEntry:
  public static final int colExceptionLine = 2;

  // Column index definitions for exceptionViewEntry:
  public static final int idxExceptionLine = 0;

  private MOTableSubIndex[] exceptionViewEntryIndexes;
  private MOTableIndex exceptionViewEntryIndex;
  
  private MOTable<ExceptionViewEntryRow,
                  MOColumn,
                  MOTableModel<ExceptionViewEntryRow>> exceptionViewEntry;
  private MOTableModel<ExceptionViewEntryRow> exceptionViewEntryModel;
  public static final OID oidDeadlocksListEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,31,1 });

  // Index OID definitions
  public static final OID oidDeadlocksListDeadlockID =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,31,1,1 });
  public static final OID oidDeadlocksListThreadID =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,31,1,2 });

  // Column TC definitions for deadlocksListEntry:
    
  // Column sub-identifier definitions for deadlocksListEntry:
  public static final int colDeadlocksListThreadName = 3;
  public static final int colDeadlocksListBlockedByThreadID = 4;
  public static final int colDeadlocksListBlockedByThreadName = 5;
  public static final int colDeadlocksListLock = 6;
  public static final int colDeadlocksListBlockedTime = 7;

  // Column index definitions for deadlocksListEntry:
  public static final int idxDeadlocksListThreadName = 0;
  public static final int idxDeadlocksListBlockedByThreadID = 1;
  public static final int idxDeadlocksListBlockedByThreadName = 2;
  public static final int idxDeadlocksListLock = 3;
  public static final int idxDeadlocksListBlockedTime = 4;

  private MOTableSubIndex[] deadlocksListEntryIndexes;
  private MOTableIndex deadlocksListEntryIndex;
  
  private MOTable<DeadlocksListEntryRow,
                  MOColumn,
                  MOTableModel<DeadlocksListEntryRow>> deadlocksListEntry;
  private MOTableModel<DeadlocksListEntryRow> deadlocksListEntryModel;
  public static final OID oidDeadlockViewEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,34,1 });

  // Index OID definitions
  public static final OID oidDeadlockThreadID =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,2,34,1,1 });

  // Column TC definitions for deadlockViewEntry:
    
  // Column sub-identifier definitions for deadlockViewEntry:
  public static final int colDeadlockThreadLine = 2;

  // Column index definitions for deadlockViewEntry:
  public static final int idxDeadlockThreadLine = 0;

  private MOTableSubIndex[] deadlockViewEntryIndexes;
  private MOTableIndex deadlockViewEntryIndex;
  
  private MOTable<DeadlockViewEntryRow,
                  MOColumn,
                  MOTableModel<DeadlockViewEntryRow>> deadlockViewEntry;
  private MOTableModel<DeadlockViewEntryRow> deadlockViewEntryModel;
  public static final OID oidPersistScalarEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,3,1 });

  // Index OID definitions
  public static final OID oidPersistScalarIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,3,1,1 });

  // Column TC definitions for persistScalarEntry:
    
  // Column sub-identifier definitions for persistScalarEntry:
  public static final int colPersistScalarName = 2;
  public static final int colPersistScalarOID = 3;
  public static final int colPersistScalarSyntax = 4;
  public static final int colPersistScalarValue = 5;
  public static final int colPersistScalarAction = 6;

  // Column index definitions for persistScalarEntry:
  public static final int idxPersistScalarName = 0;
  public static final int idxPersistScalarOID = 1;
  public static final int idxPersistScalarSyntax = 2;
  public static final int idxPersistScalarValue = 3;
  public static final int idxPersistScalarAction = 4;

  private MOTableSubIndex[] persistScalarEntryIndexes;
  private MOTableIndex persistScalarEntryIndex;
  
  private MOTable<PersistScalarEntryRow,
                  MOColumn,
                  MOTableModel<PersistScalarEntryRow>> persistScalarEntry;
  private MOTableModel<PersistScalarEntryRow> persistScalarEntryModel;
  public static final OID oidPersistTableEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,4,1 });

  // Index OID definitions
  public static final OID oidPersistTableIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,4,1,1 });

  // Column TC definitions for persistTableEntry:
    
  // Column sub-identifier definitions for persistTableEntry:
  public static final int colPersistTableName = 2;
  public static final int colPersistTableOID = 3;
  public static final int colPersistTableColumnCount = 4;
  public static final int colPersistTableRowCount = 5;
  public static final int colPersistTableAction = 6;

  // Column index definitions for persistTableEntry:
  public static final int idxPersistTableName = 0;
  public static final int idxPersistTableOID = 1;
  public static final int idxPersistTableColumnCount = 2;
  public static final int idxPersistTableRowCount = 3;
  public static final int idxPersistTableAction = 4;

  private MOTableSubIndex[] persistTableEntryIndexes;
  private MOTableIndex persistTableEntryIndex;
  
  private MOTable<PersistTableEntryRow,
                  MOColumn,
                  MOTableModel<PersistTableEntryRow>> persistTableEntry;
  private MOTableModel<PersistTableEntryRow> persistTableEntryModel;
  public static final OID oidPersistCellEntry = 
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,5,1 });

  // Index OID definitions
  public static final OID oidPersistCellIndex =
    new OID(new int[] { 1,3,6,1,4,1,29091,1,1,1,3,5,1,1 });

  // Column TC definitions for persistCellEntry:
    
  // Column sub-identifier definitions for persistCellEntry:
  public static final int colPersistCellTableName = 2;
  public static final int colPersistCellTableOID = 3;
  public static final int colPersistCellRowOID = 4;
  public static final int colPersistCellColumnName = 5;
  public static final int colPersistCellColumnOID = 6;
  public static final int colPersistCellColumnIndex = 7;
  public static final int colPersistCellColumnSyntax = 8;
  public static final int colPersistCellValue = 9;

  // Column index definitions for persistCellEntry:
  public static final int idxPersistCellTableName = 0;
  public static final int idxPersistCellTableOID = 1;
  public static final int idxPersistCellRowOID = 2;
  public static final int idxPersistCellColumnName = 3;
  public static final int idxPersistCellColumnOID = 4;
  public static final int idxPersistCellColumnIndex = 5;
  public static final int idxPersistCellColumnSyntax = 6;
  public static final int idxPersistCellValue = 7;

  private MOTableSubIndex[] persistCellEntryIndexes;
  private MOTableIndex persistCellEntryIndex;
  
  private MOTable<PersistCellEntryRow,
                  MOColumn,
                  MOTableModel<PersistCellEntryRow>> persistCellEntry;
  private MOTableModel<PersistCellEntryRow> persistCellEntryModel;


//--AgentGen BEGIN=_MEMBERS
//--AgentGen END

  /**
   * Constructs a FriendlySnmpMib instance without actually creating its
   * <code>ManagedObject</code> instances. This has to be done in a
   * sub-class constructor or after construction by calling 
   * {@link #createMO(MOFactory moFactory)}. 
   */
  protected FriendlySnmpMib() {
//--AgentGen BEGIN=_DEFAULTCONSTRUCTOR
//--AgentGen END
  }

  /**
   * Constructs a FriendlySnmpMib instance and actually creates its
   * <code>ManagedObject</code> instances using the supplied 
   * <code>MOFactory</code> (by calling
   * {@link #createMO(MOFactory moFactory)}).
   * @param moFactory
   *    the <code>MOFactory</code> to be used to create the
   *    managed objects for this module.
   */
  public FriendlySnmpMib(MOFactory moFactory) {
  	this();
    createMO(moFactory);
//--AgentGen BEGIN=_FACTORYCONSTRUCTOR
//--AgentGen END
  }

//--AgentGen BEGIN=_CONSTRUCTORS
//--AgentGen END

  /**
   * Create the ManagedObjects defined for this MIB module
   * using the specified {@link MOFactory}.
   * @param moFactory
   *    the <code>MOFactory</code> instance to use for object 
   *    creation.
   */
  protected void createMO(MOFactory moFactory) {
    addTCsToFactory(moFactory);
    shutdownApp = 
      new ShutdownApp(oidShutdownApp, 
                      moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    shutdownApp.addMOValueValidationListener(new ShutdownAppValidator());
    exceptionViewPolicy = 
      new ExceptionViewPolicy(oidExceptionViewPolicy, 
                              moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    exceptionViewPolicy.addMOValueValidationListener(new ExceptionViewPolicyValidator());
    exceptionViewFixedIndex = 
      new ExceptionViewFixedIndex(oidExceptionViewFixedIndex, 
                                  moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    exceptionViewFixedIndex.addMOValueValidationListener(new ExceptionViewFixedIndexValidator());
    deadlockCheckInterval = 
      new DeadlockCheckInterval(oidDeadlockCheckInterval, 
                                moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    deadlockCheckInterval.addMOValueValidationListener(new DeadlockCheckIntervalValidator());
    deadlockViewPolicy = 
      new DeadlockViewPolicy(oidDeadlockViewPolicy, 
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    deadlockViewPolicy.addMOValueValidationListener(new DeadlockViewPolicyValidator());
    deadlockViewFixedIndex = 
      new DeadlockViewFixedIndex(oidDeadlockViewFixedIndex, 
                                 moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE));
    deadlockViewFixedIndex.addMOValueValidationListener(new DeadlockViewFixedIndexValidator());
    createAppInfoEntry(moFactory);
    createAppDependenciesEntry(moFactory);
    createAppPropEntry(moFactory);
    createAppConfigEntry(moFactory);
    createSysPropEntry(moFactory);
    createExceptionsListEntry(moFactory);
    createExceptionViewEntry(moFactory);
    createDeadlocksListEntry(moFactory);
    createDeadlockViewEntry(moFactory);
    createPersistScalarEntry(moFactory);
    createPersistTableEntry(moFactory);
    createPersistCellEntry(moFactory);
  }

  public MOScalar<OctetString> getShutdownApp() {
    return shutdownApp;
  }
  public MOScalar<Integer32> getExceptionViewPolicy() {
    return exceptionViewPolicy;
  }
  public MOScalar<UnsignedInteger32> getExceptionViewFixedIndex() {
    return exceptionViewFixedIndex;
  }
  public MOScalar<UnsignedInteger32> getDeadlockCheckInterval() {
    return deadlockCheckInterval;
  }
  public MOScalar<Integer32> getDeadlockViewPolicy() {
    return deadlockViewPolicy;
  }
  public MOScalar<UnsignedInteger32> getDeadlockViewFixedIndex() {
    return deadlockViewFixedIndex;
  }


  public MOTable<AppInfoEntryRow,MOColumn,MOTableModel<AppInfoEntryRow>> getAppInfoEntry() {
    return appInfoEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createAppInfoEntry(MOFactory moFactory) {
    // Index definition
    appInfoEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidAppInfoIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    appInfoEntryIndex = 
      moFactory.createIndex(appInfoEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=appInfoEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] appInfoEntryColumns = new MOColumn[2];
    appInfoEntryColumns[idxAppInfoName] = 
      moFactory.createColumn(colAppInfoName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    appInfoEntryColumns[idxAppInfoDesc] = 
      moFactory.createColumn(colAppInfoDesc, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    appInfoEntryModel = (MOTableModel<AppInfoEntryRow>)
      moFactory.createTableModel(oidAppInfoEntry,
                                 appInfoEntryIndex,
                                 appInfoEntryColumns);
    ((MOMutableTableModel<AppInfoEntryRow>)appInfoEntryModel).setRowFactory(
      new AppInfoEntryRowFactory());
    appInfoEntry = 
      moFactory.createTable(oidAppInfoEntry,
                            appInfoEntryIndex,
                            appInfoEntryColumns,
                            appInfoEntryModel);
  }

  public MOTable<AppDependenciesEntryRow,MOColumn,MOTableModel<AppDependenciesEntryRow>> getAppDependenciesEntry() {
    return appDependenciesEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createAppDependenciesEntry(MOFactory moFactory) {
    // Index definition
    appDependenciesEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidAppDependenciesIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    appDependenciesEntryIndex = 
      moFactory.createIndex(appDependenciesEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=appDependenciesEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] appDependenciesEntryColumns = new MOColumn[2];
    appDependenciesEntryColumns[idxAppDependenciesName] = 
      moFactory.createColumn(colAppDependenciesName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    appDependenciesEntryColumns[idxAppDependenciesDesc] = 
      moFactory.createColumn(colAppDependenciesDesc, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    appDependenciesEntryModel = (MOTableModel<AppDependenciesEntryRow>)
      moFactory.createTableModel(oidAppDependenciesEntry,
                                 appDependenciesEntryIndex,
                                 appDependenciesEntryColumns);
    ((MOMutableTableModel<AppDependenciesEntryRow>)appDependenciesEntryModel).setRowFactory(
      new AppDependenciesEntryRowFactory());
    appDependenciesEntry = 
      moFactory.createTable(oidAppDependenciesEntry,
                            appDependenciesEntryIndex,
                            appDependenciesEntryColumns,
                            appDependenciesEntryModel);
  }

  public MOTable<AppPropEntryRow,MOColumn,MOTableModel<AppPropEntryRow>> getAppPropEntry() {
    return appPropEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createAppPropEntry(MOFactory moFactory) {
    // Index definition
    appPropEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidAppPropIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    appPropEntryIndex = 
      moFactory.createIndex(appPropEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=appPropEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] appPropEntryColumns = new MOColumn[2];
    appPropEntryColumns[idxAppPropKey] = 
      moFactory.createColumn(colAppPropKey, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    appPropEntryColumns[idxAppPropValue] = 
      moFactory.createColumn(colAppPropValue, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    appPropEntryModel = (MOTableModel<AppPropEntryRow>)
      moFactory.createTableModel(oidAppPropEntry,
                                 appPropEntryIndex,
                                 appPropEntryColumns);
    ((MOMutableTableModel<AppPropEntryRow>)appPropEntryModel).setRowFactory(
      new AppPropEntryRowFactory());
    appPropEntry = 
      moFactory.createTable(oidAppPropEntry,
                            appPropEntryIndex,
                            appPropEntryColumns,
                            appPropEntryModel);
  }

  public MOTable<AppConfigEntryRow,MOColumn,MOTableModel<AppConfigEntryRow>> getAppConfigEntry() {
    return appConfigEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createAppConfigEntry(MOFactory moFactory) {
    // Index definition
    appConfigEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidAppConfigIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    appConfigEntryIndex = 
      moFactory.createIndex(appConfigEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=appConfigEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] appConfigEntryColumns = new MOColumn[2];
    appConfigEntryColumns[idxAppConfigKey] = 
      moFactory.createColumn(colAppConfigKey, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    appConfigEntryColumns[idxAppConfigValue] = 
      moFactory.createColumn(colAppConfigValue, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    appConfigEntryModel = (MOTableModel<AppConfigEntryRow>)
      moFactory.createTableModel(oidAppConfigEntry,
                                 appConfigEntryIndex,
                                 appConfigEntryColumns);
    ((MOMutableTableModel<AppConfigEntryRow>)appConfigEntryModel).setRowFactory(
      new AppConfigEntryRowFactory());
    appConfigEntry = 
      moFactory.createTable(oidAppConfigEntry,
                            appConfigEntryIndex,
                            appConfigEntryColumns,
                            appConfigEntryModel);
  }

  public MOTable<SysPropEntryRow,MOColumn,MOTableModel<SysPropEntryRow>> getSysPropEntry() {
    return sysPropEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createSysPropEntry(MOFactory moFactory) {
    // Index definition
    sysPropEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidSysPropIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    sysPropEntryIndex = 
      moFactory.createIndex(sysPropEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=sysPropEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] sysPropEntryColumns = new MOColumn[2];
    sysPropEntryColumns[idxSysPropKey] = 
      moFactory.createColumn(colSysPropKey, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    sysPropEntryColumns[idxSysPropValue] = 
      moFactory.createColumn(colSysPropValue, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    sysPropEntryModel = (MOTableModel<SysPropEntryRow>)
      moFactory.createTableModel(oidSysPropEntry,
                                 sysPropEntryIndex,
                                 sysPropEntryColumns);
    ((MOMutableTableModel<SysPropEntryRow>)sysPropEntryModel).setRowFactory(
      new SysPropEntryRowFactory());
    sysPropEntry = 
      moFactory.createTable(oidSysPropEntry,
                            sysPropEntryIndex,
                            sysPropEntryColumns,
                            sysPropEntryModel);
  }

  public MOTable<ExceptionsListEntryRow,MOColumn,MOTableModel<ExceptionsListEntryRow>> getExceptionsListEntry() {
    return exceptionsListEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createExceptionsListEntry(MOFactory moFactory) {
    // Index definition
    exceptionsListEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidExceptionsListIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    exceptionsListEntryIndex = 
      moFactory.createIndex(exceptionsListEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=exceptionsListEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] exceptionsListEntryColumns = new MOColumn[7];
    exceptionsListEntryColumns[idxExceptionsListCount] = 
      moFactory.createColumn(colExceptionsListCount, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    exceptionsListEntryColumns[idxExceptionsListType] = 
      moFactory.createColumn(colExceptionsListType, 
                             SMIConstants.SYNTAX_INTEGER,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleFriendlySnmpMib,
                             tcDefFriendlyExceptionTypeTC);
    exceptionsListEntryColumns[idxExceptionsListLastOccur] = 
      moFactory.createColumn(colExceptionsListLastOccur, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    exceptionsListEntryColumns[idxExceptionsListMessage] = 
      moFactory.createColumn(colExceptionsListMessage, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    exceptionsListEntryColumns[idxExceptionsListClass] = 
      moFactory.createColumn(colExceptionsListClass, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    exceptionsListEntryColumns[idxExceptionsListThread] = 
      moFactory.createColumn(colExceptionsListThread, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    exceptionsListEntryColumns[idxExceptionsListAction] = 
      new MOMutableColumn<Integer32>(colExceptionsListAction,
                          SMIConstants.SYNTAX_INTEGER,
                          moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE),
                          (Integer32)null);
    ValueConstraint exceptionsListActionVC = new EnumerationConstraint(
      new int[] { 1,
                  2 });
    ((MOMutableColumn)exceptionsListEntryColumns[idxExceptionsListAction]).
      addMOValueValidationListener(new ValueConstraintValidator(exceptionsListActionVC));                                  
    ((MOMutableColumn)exceptionsListEntryColumns[idxExceptionsListAction]).
      addMOValueValidationListener(new ExceptionsListActionValidator());
    // Table model
    exceptionsListEntryModel = (MOTableModel<ExceptionsListEntryRow>)
      moFactory.createTableModel(oidExceptionsListEntry,
                                 exceptionsListEntryIndex,
                                 exceptionsListEntryColumns);
    ((MOMutableTableModel<ExceptionsListEntryRow>)exceptionsListEntryModel).setRowFactory(
      new ExceptionsListEntryRowFactory());
    exceptionsListEntry = 
      moFactory.createTable(oidExceptionsListEntry,
                            exceptionsListEntryIndex,
                            exceptionsListEntryColumns,
                            exceptionsListEntryModel);
  }

  public MOTable<ExceptionViewEntryRow,MOColumn,MOTableModel<ExceptionViewEntryRow>> getExceptionViewEntry() {
    return exceptionViewEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createExceptionViewEntry(MOFactory moFactory) {
    // Index definition
    exceptionViewEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidExceptionIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    exceptionViewEntryIndex = 
      moFactory.createIndex(exceptionViewEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=exceptionViewEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] exceptionViewEntryColumns = new MOColumn[1];
    exceptionViewEntryColumns[idxExceptionLine] = 
      moFactory.createColumn(colExceptionLine, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    exceptionViewEntryModel = (MOTableModel<ExceptionViewEntryRow>)
      moFactory.createTableModel(oidExceptionViewEntry,
                                 exceptionViewEntryIndex,
                                 exceptionViewEntryColumns);
    ((MOMutableTableModel<ExceptionViewEntryRow>)exceptionViewEntryModel).setRowFactory(
      new ExceptionViewEntryRowFactory());
    exceptionViewEntry = 
      moFactory.createTable(oidExceptionViewEntry,
                            exceptionViewEntryIndex,
                            exceptionViewEntryColumns,
                            exceptionViewEntryModel);
  }

  public MOTable<DeadlocksListEntryRow,MOColumn,MOTableModel<DeadlocksListEntryRow>> getDeadlocksListEntry() {
    return deadlocksListEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createDeadlocksListEntry(MOFactory moFactory) {
    // Index definition
    deadlocksListEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidDeadlocksListDeadlockID, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1),
      moFactory.createSubIndex(oidDeadlocksListThreadID, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    deadlocksListEntryIndex = 
      moFactory.createIndex(deadlocksListEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=deadlocksListEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] deadlocksListEntryColumns = new MOColumn[5];
    deadlocksListEntryColumns[idxDeadlocksListThreadName] = 
      moFactory.createColumn(colDeadlocksListThreadName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    deadlocksListEntryColumns[idxDeadlocksListBlockedByThreadID] = 
      moFactory.createColumn(colDeadlocksListBlockedByThreadID, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    deadlocksListEntryColumns[idxDeadlocksListBlockedByThreadName] = 
      moFactory.createColumn(colDeadlocksListBlockedByThreadName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    deadlocksListEntryColumns[idxDeadlocksListLock] = 
      moFactory.createColumn(colDeadlocksListLock, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    deadlocksListEntryColumns[idxDeadlocksListBlockedTime] = 
      moFactory.createColumn(colDeadlocksListBlockedTime, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    deadlocksListEntryModel = (MOTableModel<DeadlocksListEntryRow>)
      moFactory.createTableModel(oidDeadlocksListEntry,
                                 deadlocksListEntryIndex,
                                 deadlocksListEntryColumns);
    ((MOMutableTableModel<DeadlocksListEntryRow>)deadlocksListEntryModel).setRowFactory(
      new DeadlocksListEntryRowFactory());
    deadlocksListEntry = 
      moFactory.createTable(oidDeadlocksListEntry,
                            deadlocksListEntryIndex,
                            deadlocksListEntryColumns,
                            deadlocksListEntryModel);
  }

  public MOTable<DeadlockViewEntryRow,MOColumn,MOTableModel<DeadlockViewEntryRow>> getDeadlockViewEntry() {
    return deadlockViewEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createDeadlockViewEntry(MOFactory moFactory) {
    // Index definition
    deadlockViewEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidDeadlockThreadID, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    deadlockViewEntryIndex = 
      moFactory.createIndex(deadlockViewEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=deadlockViewEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] deadlockViewEntryColumns = new MOColumn[1];
    deadlockViewEntryColumns[idxDeadlockThreadLine] = 
      moFactory.createColumn(colDeadlockThreadLine, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    deadlockViewEntryModel = (MOTableModel<DeadlockViewEntryRow>)
      moFactory.createTableModel(oidDeadlockViewEntry,
                                 deadlockViewEntryIndex,
                                 deadlockViewEntryColumns);
    ((MOMutableTableModel<DeadlockViewEntryRow>)deadlockViewEntryModel).setRowFactory(
      new DeadlockViewEntryRowFactory());
    deadlockViewEntry = 
      moFactory.createTable(oidDeadlockViewEntry,
                            deadlockViewEntryIndex,
                            deadlockViewEntryColumns,
                            deadlockViewEntryModel);
  }

  public MOTable<PersistScalarEntryRow,MOColumn,MOTableModel<PersistScalarEntryRow>> getPersistScalarEntry() {
    return persistScalarEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createPersistScalarEntry(MOFactory moFactory) {
    // Index definition
    persistScalarEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidPersistScalarIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    persistScalarEntryIndex = 
      moFactory.createIndex(persistScalarEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=persistScalarEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] persistScalarEntryColumns = new MOColumn[5];
    persistScalarEntryColumns[idxPersistScalarName] = 
      moFactory.createColumn(colPersistScalarName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistScalarEntryColumns[idxPersistScalarOID] = 
      moFactory.createColumn(colPersistScalarOID, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistScalarEntryColumns[idxPersistScalarSyntax] = 
      moFactory.createColumn(colPersistScalarSyntax, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistScalarEntryColumns[idxPersistScalarValue] = 
      moFactory.createColumn(colPersistScalarValue, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistScalarEntryColumns[idxPersistScalarAction] = 
      new MOMutableColumn<Integer32>(colPersistScalarAction,
                          SMIConstants.SYNTAX_INTEGER,
                          moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE),
                          (Integer32)null);
    ValueConstraint persistScalarActionVC = new EnumerationConstraint(
      new int[] { 1,
                  2 });
    ((MOMutableColumn)persistScalarEntryColumns[idxPersistScalarAction]).
      addMOValueValidationListener(new ValueConstraintValidator(persistScalarActionVC));                                  
    ((MOMutableColumn)persistScalarEntryColumns[idxPersistScalarAction]).
      addMOValueValidationListener(new PersistScalarActionValidator());
    // Table model
    persistScalarEntryModel = (MOTableModel<PersistScalarEntryRow>)
      moFactory.createTableModel(oidPersistScalarEntry,
                                 persistScalarEntryIndex,
                                 persistScalarEntryColumns);
    ((MOMutableTableModel<PersistScalarEntryRow>)persistScalarEntryModel).setRowFactory(
      new PersistScalarEntryRowFactory());
    persistScalarEntry = 
      moFactory.createTable(oidPersistScalarEntry,
                            persistScalarEntryIndex,
                            persistScalarEntryColumns,
                            persistScalarEntryModel);
  }

  public MOTable<PersistTableEntryRow,MOColumn,MOTableModel<PersistTableEntryRow>> getPersistTableEntry() {
    return persistTableEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createPersistTableEntry(MOFactory moFactory) {
    // Index definition
    persistTableEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidPersistTableIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    persistTableEntryIndex = 
      moFactory.createIndex(persistTableEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=persistTableEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] persistTableEntryColumns = new MOColumn[5];
    persistTableEntryColumns[idxPersistTableName] = 
      moFactory.createColumn(colPersistTableName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistTableEntryColumns[idxPersistTableOID] = 
      moFactory.createColumn(colPersistTableOID, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistTableEntryColumns[idxPersistTableColumnCount] = 
      moFactory.createColumn(colPersistTableColumnCount, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    persistTableEntryColumns[idxPersistTableRowCount] = 
      moFactory.createColumn(colPersistTableRowCount, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    persistTableEntryColumns[idxPersistTableAction] = 
      new MOMutableColumn<Integer32>(colPersistTableAction,
                          SMIConstants.SYNTAX_INTEGER,
                          moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_WRITE),
                          (Integer32)null);
    ValueConstraint persistTableActionVC = new EnumerationConstraint(
      new int[] { 1,
                  2 });
    ((MOMutableColumn)persistTableEntryColumns[idxPersistTableAction]).
      addMOValueValidationListener(new ValueConstraintValidator(persistTableActionVC));                                  
    ((MOMutableColumn)persistTableEntryColumns[idxPersistTableAction]).
      addMOValueValidationListener(new PersistTableActionValidator());
    // Table model
    persistTableEntryModel = (MOTableModel<PersistTableEntryRow>)
      moFactory.createTableModel(oidPersistTableEntry,
                                 persistTableEntryIndex,
                                 persistTableEntryColumns);
    ((MOMutableTableModel<PersistTableEntryRow>)persistTableEntryModel).setRowFactory(
      new PersistTableEntryRowFactory());
    persistTableEntry = 
      moFactory.createTable(oidPersistTableEntry,
                            persistTableEntryIndex,
                            persistTableEntryColumns,
                            persistTableEntryModel);
  }

  public MOTable<PersistCellEntryRow,MOColumn,MOTableModel<PersistCellEntryRow>> getPersistCellEntry() {
    return persistCellEntry;
  }


  @SuppressWarnings(value={"unchecked"})
  private void createPersistCellEntry(MOFactory moFactory) {
    // Index definition
    persistCellEntryIndexes = 
      new MOTableSubIndex[] {
      moFactory.createSubIndex(oidPersistCellIndex, 
                               SMIConstants.SYNTAX_INTEGER, 1, 1)    };

    persistCellEntryIndex = 
      moFactory.createIndex(persistCellEntryIndexes,
                            false,
                            new MOTableIndexValidator() {
      public boolean isValidIndex(OID index) {
        boolean isValidIndex = true;
     //--AgentGen BEGIN=persistCellEntry::isValidIndex
     //--AgentGen END
        return isValidIndex;
      }
    });

    // Columns
    MOColumn[] persistCellEntryColumns = new MOColumn[8];
    persistCellEntryColumns[idxPersistCellTableName] = 
      moFactory.createColumn(colPersistCellTableName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistCellEntryColumns[idxPersistCellTableOID] = 
      moFactory.createColumn(colPersistCellTableOID, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistCellEntryColumns[idxPersistCellRowOID] = 
      moFactory.createColumn(colPersistCellRowOID, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistCellEntryColumns[idxPersistCellColumnName] = 
      moFactory.createColumn(colPersistCellColumnName, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistCellEntryColumns[idxPersistCellColumnOID] = 
      moFactory.createColumn(colPersistCellColumnOID, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    persistCellEntryColumns[idxPersistCellColumnIndex] = 
      moFactory.createColumn(colPersistCellColumnIndex, 
                             SMIConstants.SYNTAX_GAUGE32,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY));
    persistCellEntryColumns[idxPersistCellColumnSyntax] = 
      moFactory.createColumn(colPersistCellColumnSyntax, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    persistCellEntryColumns[idxPersistCellValue] = 
      moFactory.createColumn(colPersistCellValue, 
                             SMIConstants.SYNTAX_OCTET_STRING,
                             moFactory.createAccess(MOAccessImpl.ACCESSIBLE_FOR_READ_ONLY),
                             tcModuleSNMPv2Tc,
                             tcDefDisplayString);
    // Table model
    persistCellEntryModel = (MOTableModel<PersistCellEntryRow>)
      moFactory.createTableModel(oidPersistCellEntry,
                                 persistCellEntryIndex,
                                 persistCellEntryColumns);
    ((MOMutableTableModel<PersistCellEntryRow>)persistCellEntryModel).setRowFactory(
      new PersistCellEntryRowFactory());
    persistCellEntry = 
      moFactory.createTable(oidPersistCellEntry,
                            persistCellEntryIndex,
                            persistCellEntryColumns,
                            persistCellEntryModel);
  }



  public void registerMOs(MOServer server, OctetString context) 
    throws DuplicateRegistrationException 
  {
    // Scalar Objects
    server.register(this.shutdownApp, context);
    server.register(this.exceptionViewPolicy, context);
    server.register(this.exceptionViewFixedIndex, context);
    server.register(this.deadlockCheckInterval, context);
    server.register(this.deadlockViewPolicy, context);
    server.register(this.deadlockViewFixedIndex, context);
    server.register(this.appInfoEntry, context);
    server.register(this.appDependenciesEntry, context);
    server.register(this.appPropEntry, context);
    server.register(this.appConfigEntry, context);
    server.register(this.sysPropEntry, context);
    server.register(this.exceptionsListEntry, context);
    server.register(this.exceptionViewEntry, context);
    server.register(this.deadlocksListEntry, context);
    server.register(this.deadlockViewEntry, context);
    server.register(this.persistScalarEntry, context);
    server.register(this.persistTableEntry, context);
    server.register(this.persistCellEntry, context);
//--AgentGen BEGIN=_registerMOs
//--AgentGen END
  }

  public void unregisterMOs(MOServer server, OctetString context) {
    // Scalar Objects
    server.unregister(this.shutdownApp, context);
    server.unregister(this.exceptionViewPolicy, context);
    server.unregister(this.exceptionViewFixedIndex, context);
    server.unregister(this.deadlockCheckInterval, context);
    server.unregister(this.deadlockViewPolicy, context);
    server.unregister(this.deadlockViewFixedIndex, context);
    server.unregister(this.appInfoEntry, context);
    server.unregister(this.appDependenciesEntry, context);
    server.unregister(this.appPropEntry, context);
    server.unregister(this.appConfigEntry, context);
    server.unregister(this.sysPropEntry, context);
    server.unregister(this.exceptionsListEntry, context);
    server.unregister(this.exceptionViewEntry, context);
    server.unregister(this.deadlocksListEntry, context);
    server.unregister(this.deadlockViewEntry, context);
    server.unregister(this.persistScalarEntry, context);
    server.unregister(this.persistTableEntry, context);
    server.unregister(this.persistCellEntry, context);
//--AgentGen BEGIN=_unregisterMOs
//--AgentGen END
  }

  // Notifications
  public void appStop(NotificationOriginator notificationOriginator,
                      OctetString context, VariableBinding[] vbs) {
    notificationOriginator.notify(context, oidAppStop, vbs);
  }

  public void appShutdown(NotificationOriginator notificationOriginator,
                          OctetString context, VariableBinding[] vbs) {
    notificationOriginator.notify(context, oidAppShutdown, vbs);
  }

  public void appExceptionCaught(NotificationOriginator notificationOriginator,
                                 OctetString context, VariableBinding[] vbs) {
    notificationOriginator.notify(context, oidAppExceptionCaught, vbs);
  }

  public void appExceptionUncaught(NotificationOriginator notificationOriginator,
                                   OctetString context, VariableBinding[] vbs) {
    notificationOriginator.notify(context, oidAppExceptionUncaught, vbs);
  }

  public void appDeadlock(NotificationOriginator notificationOriginator,
                          OctetString context, VariableBinding[] vbs) {
    notificationOriginator.notify(context, oidAppDeadlock, vbs);
  }


  // Scalars
  public class ShutdownApp extends DisplayStringScalar<OctetString> {
    ShutdownApp(OID oid, MOAccess access) {
      super(oid, access, new OctetString(),
            0, 
            255);
//--AgentGen BEGIN=shutdownApp
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
      OctetString os = (OctetString)newValue;
      if (!(((os.length() >= 0) && (os.length() <= 255)))) {
        valueOK = SnmpConstants.SNMP_ERROR_WRONG_LENGTH;
      }
     //--AgentGen BEGIN=shutdownApp::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public OctetString getValue() {
     //--AgentGen BEGIN=shutdownApp::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(OctetString newValue) {
     //--AgentGen BEGIN=shutdownApp::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=shutdownApp::_METHODS
     //--AgentGen END

  }

  public class ExceptionViewPolicy extends MOScalar<Integer32> {
    ExceptionViewPolicy(OID oid, MOAccess access) {
      super(oid, access, new Integer32());
//--AgentGen BEGIN=exceptionViewPolicy
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
     //--AgentGen BEGIN=exceptionViewPolicy::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public Integer32 getValue() {
     //--AgentGen BEGIN=exceptionViewPolicy::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(Integer32 newValue) {
     //--AgentGen BEGIN=exceptionViewPolicy::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=exceptionViewPolicy::_METHODS
     //--AgentGen END

  }

  public class ExceptionViewFixedIndex extends MOScalar<UnsignedInteger32> {
    ExceptionViewFixedIndex(OID oid, MOAccess access) {
      super(oid, access, new UnsignedInteger32());
//--AgentGen BEGIN=exceptionViewFixedIndex
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
     //--AgentGen BEGIN=exceptionViewFixedIndex::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public UnsignedInteger32 getValue() {
     //--AgentGen BEGIN=exceptionViewFixedIndex::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=exceptionViewFixedIndex::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=exceptionViewFixedIndex::_METHODS
     //--AgentGen END

  }

  public class DeadlockCheckInterval extends MOScalar<UnsignedInteger32> {
    DeadlockCheckInterval(OID oid, MOAccess access) {
      super(oid, access, new UnsignedInteger32());
//--AgentGen BEGIN=deadlockCheckInterval
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
     //--AgentGen BEGIN=deadlockCheckInterval::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public UnsignedInteger32 getValue() {
     //--AgentGen BEGIN=deadlockCheckInterval::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=deadlockCheckInterval::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=deadlockCheckInterval::_METHODS
     //--AgentGen END

  }

  public class DeadlockViewPolicy extends MOScalar<Integer32> {
    DeadlockViewPolicy(OID oid, MOAccess access) {
      super(oid, access, new Integer32());
//--AgentGen BEGIN=deadlockViewPolicy
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
     //--AgentGen BEGIN=deadlockViewPolicy::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public Integer32 getValue() {
     //--AgentGen BEGIN=deadlockViewPolicy::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(Integer32 newValue) {
     //--AgentGen BEGIN=deadlockViewPolicy::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=deadlockViewPolicy::_METHODS
     //--AgentGen END

  }

  public class DeadlockViewFixedIndex extends MOScalar<UnsignedInteger32> {
    DeadlockViewFixedIndex(OID oid, MOAccess access) {
      super(oid, access, new UnsignedInteger32());
//--AgentGen BEGIN=deadlockViewFixedIndex
//--AgentGen END
    }

    public int isValueOK(SubRequest request) {
      Variable newValue =
        request.getVariableBinding().getVariable();
      int valueOK = super.isValueOK(request);
      if (valueOK != SnmpConstants.SNMP_ERROR_SUCCESS) {
      	return valueOK;
      }
     //--AgentGen BEGIN=deadlockViewFixedIndex::isValueOK
     //--AgentGen END
      return valueOK; 
    }

    public UnsignedInteger32 getValue() {
     //--AgentGen BEGIN=deadlockViewFixedIndex::getValue
     //--AgentGen END
      return super.getValue();    
    }

    public int setValue(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=deadlockViewFixedIndex::setValue
     //--AgentGen END
      return super.setValue(newValue);    
    }

     //--AgentGen BEGIN=deadlockViewFixedIndex::_METHODS
     //--AgentGen END

  }


  // Value Validators
  /**
   * The <code>ShutdownAppValidator</code> implements the value
   * validation for <code>ShutdownApp</code>.
   */
  static class ShutdownAppValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
      OctetString os = (OctetString)newValue;
      if (!(((os.length() >= 0) && (os.length() <= 255)))) {
        validationEvent.setValidationStatus(SnmpConstants.SNMP_ERROR_WRONG_LENGTH);
        return;
      }
     //--AgentGen BEGIN=shutdownApp::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>ExceptionViewPolicyValidator</code> implements the value
   * validation for <code>ExceptionViewPolicy</code>.
   */
  static class ExceptionViewPolicyValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=exceptionViewPolicy::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>ExceptionViewFixedIndexValidator</code> implements the value
   * validation for <code>ExceptionViewFixedIndex</code>.
   */
  static class ExceptionViewFixedIndexValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=exceptionViewFixedIndex::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>DeadlockCheckIntervalValidator</code> implements the value
   * validation for <code>DeadlockCheckInterval</code>.
   */
  static class DeadlockCheckIntervalValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=deadlockCheckInterval::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>DeadlockViewPolicyValidator</code> implements the value
   * validation for <code>DeadlockViewPolicy</code>.
   */
  static class DeadlockViewPolicyValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=deadlockViewPolicy::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>DeadlockViewFixedIndexValidator</code> implements the value
   * validation for <code>DeadlockViewFixedIndex</code>.
   */
  static class DeadlockViewFixedIndexValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=deadlockViewFixedIndex::validate
     //--AgentGen END
    }
  }

  /**
   * The <code>ExceptionsListActionValidator</code> implements the value
   * validation for <code>ExceptionsListAction</code>.
   */
  static class ExceptionsListActionValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=exceptionsListAction::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>PersistScalarActionValidator</code> implements the value
   * validation for <code>PersistScalarAction</code>.
   */
  static class PersistScalarActionValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=persistScalarAction::validate
     //--AgentGen END
    }
  }
  /**
   * The <code>PersistTableActionValidator</code> implements the value
   * validation for <code>PersistTableAction</code>.
   */
  static class PersistTableActionValidator implements MOValueValidationListener {
    
    public void validate(MOValueValidationEvent validationEvent) {
      Variable newValue = validationEvent.getNewValue();
     //--AgentGen BEGIN=persistTableAction::validate
     //--AgentGen END
    }
  }

  // Rows and Factories

  public class AppInfoEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=appInfoEntry::RowMembers
     //--AgentGen END

    public AppInfoEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=appInfoEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getAppInfoName() {
     //--AgentGen BEGIN=appInfoEntry::getAppInfoName
     //--AgentGen END
      return (OctetString) super.getValue(idxAppInfoName);
    }  
    
    public void setAppInfoName(OctetString newValue) {
     //--AgentGen BEGIN=appInfoEntry::setAppInfoName
     //--AgentGen END
      super.setValue(idxAppInfoName, newValue);
    }
    
    public OctetString getAppInfoDesc() {
     //--AgentGen BEGIN=appInfoEntry::getAppInfoDesc
     //--AgentGen END
      return (OctetString) super.getValue(idxAppInfoDesc);
    }  
    
    public void setAppInfoDesc(OctetString newValue) {
     //--AgentGen BEGIN=appInfoEntry::setAppInfoDesc
     //--AgentGen END
      super.setValue(idxAppInfoDesc, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=appInfoEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxAppInfoName: 
        	return getAppInfoName();
        case idxAppInfoDesc: 
        	return getAppInfoDesc();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=appInfoEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxAppInfoName: 
        	setAppInfoName((OctetString)value);
        	break;
        case idxAppInfoDesc: 
        	setAppInfoDesc((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=appInfoEntry::Row
     //--AgentGen END
  }
  
  class AppInfoEntryRowFactory 
        implements MOTableRowFactory<AppInfoEntryRow>
  {
    public synchronized AppInfoEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      AppInfoEntryRow row = 
        new AppInfoEntryRow(index, values);
     //--AgentGen BEGIN=appInfoEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(AppInfoEntryRow row) {
     //--AgentGen BEGIN=appInfoEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=appInfoEntry::RowFactory
     //--AgentGen END
  }

  public class AppDependenciesEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=appDependenciesEntry::RowMembers
     //--AgentGen END

    public AppDependenciesEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=appDependenciesEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getAppDependenciesName() {
     //--AgentGen BEGIN=appDependenciesEntry::getAppDependenciesName
     //--AgentGen END
      return (OctetString) super.getValue(idxAppDependenciesName);
    }  
    
    public void setAppDependenciesName(OctetString newValue) {
     //--AgentGen BEGIN=appDependenciesEntry::setAppDependenciesName
     //--AgentGen END
      super.setValue(idxAppDependenciesName, newValue);
    }
    
    public OctetString getAppDependenciesDesc() {
     //--AgentGen BEGIN=appDependenciesEntry::getAppDependenciesDesc
     //--AgentGen END
      return (OctetString) super.getValue(idxAppDependenciesDesc);
    }  
    
    public void setAppDependenciesDesc(OctetString newValue) {
     //--AgentGen BEGIN=appDependenciesEntry::setAppDependenciesDesc
     //--AgentGen END
      super.setValue(idxAppDependenciesDesc, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=appDependenciesEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxAppDependenciesName: 
        	return getAppDependenciesName();
        case idxAppDependenciesDesc: 
        	return getAppDependenciesDesc();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=appDependenciesEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxAppDependenciesName: 
        	setAppDependenciesName((OctetString)value);
        	break;
        case idxAppDependenciesDesc: 
        	setAppDependenciesDesc((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=appDependenciesEntry::Row
     //--AgentGen END
  }
  
  class AppDependenciesEntryRowFactory 
        implements MOTableRowFactory<AppDependenciesEntryRow>
  {
    public synchronized AppDependenciesEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      AppDependenciesEntryRow row = 
        new AppDependenciesEntryRow(index, values);
     //--AgentGen BEGIN=appDependenciesEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(AppDependenciesEntryRow row) {
     //--AgentGen BEGIN=appDependenciesEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=appDependenciesEntry::RowFactory
     //--AgentGen END
  }

  public class AppPropEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=appPropEntry::RowMembers
     //--AgentGen END

    public AppPropEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=appPropEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getAppPropKey() {
     //--AgentGen BEGIN=appPropEntry::getAppPropKey
     //--AgentGen END
      return (OctetString) super.getValue(idxAppPropKey);
    }  
    
    public void setAppPropKey(OctetString newValue) {
     //--AgentGen BEGIN=appPropEntry::setAppPropKey
     //--AgentGen END
      super.setValue(idxAppPropKey, newValue);
    }
    
    public OctetString getAppPropValue() {
     //--AgentGen BEGIN=appPropEntry::getAppPropValue
     //--AgentGen END
      return (OctetString) super.getValue(idxAppPropValue);
    }  
    
    public void setAppPropValue(OctetString newValue) {
     //--AgentGen BEGIN=appPropEntry::setAppPropValue
     //--AgentGen END
      super.setValue(idxAppPropValue, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=appPropEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxAppPropKey: 
        	return getAppPropKey();
        case idxAppPropValue: 
        	return getAppPropValue();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=appPropEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxAppPropKey: 
        	setAppPropKey((OctetString)value);
        	break;
        case idxAppPropValue: 
        	setAppPropValue((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=appPropEntry::Row
     //--AgentGen END
  }
  
  class AppPropEntryRowFactory 
        implements MOTableRowFactory<AppPropEntryRow>
  {
    public synchronized AppPropEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      AppPropEntryRow row = 
        new AppPropEntryRow(index, values);
     //--AgentGen BEGIN=appPropEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(AppPropEntryRow row) {
     //--AgentGen BEGIN=appPropEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=appPropEntry::RowFactory
     //--AgentGen END
  }

  public class AppConfigEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=appConfigEntry::RowMembers
     //--AgentGen END

    public AppConfigEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=appConfigEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getAppConfigKey() {
     //--AgentGen BEGIN=appConfigEntry::getAppConfigKey
     //--AgentGen END
      return (OctetString) super.getValue(idxAppConfigKey);
    }  
    
    public void setAppConfigKey(OctetString newValue) {
     //--AgentGen BEGIN=appConfigEntry::setAppConfigKey
     //--AgentGen END
      super.setValue(idxAppConfigKey, newValue);
    }
    
    public OctetString getAppConfigValue() {
     //--AgentGen BEGIN=appConfigEntry::getAppConfigValue
     //--AgentGen END
      return (OctetString) super.getValue(idxAppConfigValue);
    }  
    
    public void setAppConfigValue(OctetString newValue) {
     //--AgentGen BEGIN=appConfigEntry::setAppConfigValue
     //--AgentGen END
      super.setValue(idxAppConfigValue, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=appConfigEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxAppConfigKey: 
        	return getAppConfigKey();
        case idxAppConfigValue: 
        	return getAppConfigValue();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=appConfigEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxAppConfigKey: 
        	setAppConfigKey((OctetString)value);
        	break;
        case idxAppConfigValue: 
        	setAppConfigValue((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=appConfigEntry::Row
     //--AgentGen END
  }
  
  class AppConfigEntryRowFactory 
        implements MOTableRowFactory<AppConfigEntryRow>
  {
    public synchronized AppConfigEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      AppConfigEntryRow row = 
        new AppConfigEntryRow(index, values);
     //--AgentGen BEGIN=appConfigEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(AppConfigEntryRow row) {
     //--AgentGen BEGIN=appConfigEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=appConfigEntry::RowFactory
     //--AgentGen END
  }

  public class SysPropEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=sysPropEntry::RowMembers
     //--AgentGen END

    public SysPropEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=sysPropEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getSysPropKey() {
     //--AgentGen BEGIN=sysPropEntry::getSysPropKey
     //--AgentGen END
      return (OctetString) super.getValue(idxSysPropKey);
    }  
    
    public void setSysPropKey(OctetString newValue) {
     //--AgentGen BEGIN=sysPropEntry::setSysPropKey
     //--AgentGen END
      super.setValue(idxSysPropKey, newValue);
    }
    
    public OctetString getSysPropValue() {
     //--AgentGen BEGIN=sysPropEntry::getSysPropValue
     //--AgentGen END
      return (OctetString) super.getValue(idxSysPropValue);
    }  
    
    public void setSysPropValue(OctetString newValue) {
     //--AgentGen BEGIN=sysPropEntry::setSysPropValue
     //--AgentGen END
      super.setValue(idxSysPropValue, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=sysPropEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxSysPropKey: 
        	return getSysPropKey();
        case idxSysPropValue: 
        	return getSysPropValue();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=sysPropEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxSysPropKey: 
        	setSysPropKey((OctetString)value);
        	break;
        case idxSysPropValue: 
        	setSysPropValue((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=sysPropEntry::Row
     //--AgentGen END
  }
  
  class SysPropEntryRowFactory 
        implements MOTableRowFactory<SysPropEntryRow>
  {
    public synchronized SysPropEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      SysPropEntryRow row = 
        new SysPropEntryRow(index, values);
     //--AgentGen BEGIN=sysPropEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(SysPropEntryRow row) {
     //--AgentGen BEGIN=sysPropEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=sysPropEntry::RowFactory
     //--AgentGen END
  }

  public class ExceptionsListEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=exceptionsListEntry::RowMembers
     //--AgentGen END

    public ExceptionsListEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=exceptionsListEntry::RowConstructor
     //--AgentGen END
    }
    
    public UnsignedInteger32 getExceptionsListCount() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListCount
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxExceptionsListCount);
    }  
    
    public void setExceptionsListCount(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListCount
     //--AgentGen END
      super.setValue(idxExceptionsListCount, newValue);
    }
    
    public Integer32 getExceptionsListType() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListType
     //--AgentGen END
      return (Integer32) super.getValue(idxExceptionsListType);
    }  
    
    public void setExceptionsListType(Integer32 newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListType
     //--AgentGen END
      super.setValue(idxExceptionsListType, newValue);
    }
    
    public OctetString getExceptionsListLastOccur() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListLastOccur
     //--AgentGen END
      return (OctetString) super.getValue(idxExceptionsListLastOccur);
    }  
    
    public void setExceptionsListLastOccur(OctetString newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListLastOccur
     //--AgentGen END
      super.setValue(idxExceptionsListLastOccur, newValue);
    }
    
    public OctetString getExceptionsListMessage() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListMessage
     //--AgentGen END
      return (OctetString) super.getValue(idxExceptionsListMessage);
    }  
    
    public void setExceptionsListMessage(OctetString newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListMessage
     //--AgentGen END
      super.setValue(idxExceptionsListMessage, newValue);
    }
    
    public OctetString getExceptionsListClass() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListClass
     //--AgentGen END
      return (OctetString) super.getValue(idxExceptionsListClass);
    }  
    
    public void setExceptionsListClass(OctetString newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListClass
     //--AgentGen END
      super.setValue(idxExceptionsListClass, newValue);
    }
    
    public OctetString getExceptionsListThread() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListThread
     //--AgentGen END
      return (OctetString) super.getValue(idxExceptionsListThread);
    }  
    
    public void setExceptionsListThread(OctetString newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListThread
     //--AgentGen END
      super.setValue(idxExceptionsListThread, newValue);
    }
    
    public Integer32 getExceptionsListAction() {
     //--AgentGen BEGIN=exceptionsListEntry::getExceptionsListAction
     //--AgentGen END
      return (Integer32) super.getValue(idxExceptionsListAction);
    }  
    
    public void setExceptionsListAction(Integer32 newValue) {
     //--AgentGen BEGIN=exceptionsListEntry::setExceptionsListAction
     //--AgentGen END
      super.setValue(idxExceptionsListAction, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=exceptionsListEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxExceptionsListCount: 
        	return getExceptionsListCount();
        case idxExceptionsListType: 
        	return getExceptionsListType();
        case idxExceptionsListLastOccur: 
        	return getExceptionsListLastOccur();
        case idxExceptionsListMessage: 
        	return getExceptionsListMessage();
        case idxExceptionsListClass: 
        	return getExceptionsListClass();
        case idxExceptionsListThread: 
        	return getExceptionsListThread();
        case idxExceptionsListAction: 
        	return getExceptionsListAction();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=exceptionsListEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxExceptionsListCount: 
        	setExceptionsListCount((UnsignedInteger32)value);
        	break;
        case idxExceptionsListType: 
        	setExceptionsListType((Integer32)value);
        	break;
        case idxExceptionsListLastOccur: 
        	setExceptionsListLastOccur((OctetString)value);
        	break;
        case idxExceptionsListMessage: 
        	setExceptionsListMessage((OctetString)value);
        	break;
        case idxExceptionsListClass: 
        	setExceptionsListClass((OctetString)value);
        	break;
        case idxExceptionsListThread: 
        	setExceptionsListThread((OctetString)value);
        	break;
        case idxExceptionsListAction: 
        	setExceptionsListAction((Integer32)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=exceptionsListEntry::Row
     //--AgentGen END
  }
  
  class ExceptionsListEntryRowFactory 
        implements MOTableRowFactory<ExceptionsListEntryRow>
  {
    public synchronized ExceptionsListEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      ExceptionsListEntryRow row = 
        new ExceptionsListEntryRow(index, values);
     //--AgentGen BEGIN=exceptionsListEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(ExceptionsListEntryRow row) {
     //--AgentGen BEGIN=exceptionsListEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=exceptionsListEntry::RowFactory
     //--AgentGen END
  }

  public class ExceptionViewEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=exceptionViewEntry::RowMembers
     //--AgentGen END

    public ExceptionViewEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=exceptionViewEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getExceptionLine() {
     //--AgentGen BEGIN=exceptionViewEntry::getExceptionLine
     //--AgentGen END
      return (OctetString) super.getValue(idxExceptionLine);
    }  
    
    public void setExceptionLine(OctetString newValue) {
     //--AgentGen BEGIN=exceptionViewEntry::setExceptionLine
     //--AgentGen END
      super.setValue(idxExceptionLine, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=exceptionViewEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxExceptionLine: 
        	return getExceptionLine();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=exceptionViewEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxExceptionLine: 
        	setExceptionLine((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=exceptionViewEntry::Row
     //--AgentGen END
  }
  
  class ExceptionViewEntryRowFactory 
        implements MOTableRowFactory<ExceptionViewEntryRow>
  {
    public synchronized ExceptionViewEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      ExceptionViewEntryRow row = 
        new ExceptionViewEntryRow(index, values);
     //--AgentGen BEGIN=exceptionViewEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(ExceptionViewEntryRow row) {
     //--AgentGen BEGIN=exceptionViewEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=exceptionViewEntry::RowFactory
     //--AgentGen END
  }

  public class DeadlocksListEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=deadlocksListEntry::RowMembers
     //--AgentGen END

    public DeadlocksListEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=deadlocksListEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getDeadlocksListThreadName() {
     //--AgentGen BEGIN=deadlocksListEntry::getDeadlocksListThreadName
     //--AgentGen END
      return (OctetString) super.getValue(idxDeadlocksListThreadName);
    }  
    
    public void setDeadlocksListThreadName(OctetString newValue) {
     //--AgentGen BEGIN=deadlocksListEntry::setDeadlocksListThreadName
     //--AgentGen END
      super.setValue(idxDeadlocksListThreadName, newValue);
    }
    
    public UnsignedInteger32 getDeadlocksListBlockedByThreadID() {
     //--AgentGen BEGIN=deadlocksListEntry::getDeadlocksListBlockedByThreadID
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxDeadlocksListBlockedByThreadID);
    }  
    
    public void setDeadlocksListBlockedByThreadID(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=deadlocksListEntry::setDeadlocksListBlockedByThreadID
     //--AgentGen END
      super.setValue(idxDeadlocksListBlockedByThreadID, newValue);
    }
    
    public OctetString getDeadlocksListBlockedByThreadName() {
     //--AgentGen BEGIN=deadlocksListEntry::getDeadlocksListBlockedByThreadName
     //--AgentGen END
      return (OctetString) super.getValue(idxDeadlocksListBlockedByThreadName);
    }  
    
    public void setDeadlocksListBlockedByThreadName(OctetString newValue) {
     //--AgentGen BEGIN=deadlocksListEntry::setDeadlocksListBlockedByThreadName
     //--AgentGen END
      super.setValue(idxDeadlocksListBlockedByThreadName, newValue);
    }
    
    public OctetString getDeadlocksListLock() {
     //--AgentGen BEGIN=deadlocksListEntry::getDeadlocksListLock
     //--AgentGen END
      return (OctetString) super.getValue(idxDeadlocksListLock);
    }  
    
    public void setDeadlocksListLock(OctetString newValue) {
     //--AgentGen BEGIN=deadlocksListEntry::setDeadlocksListLock
     //--AgentGen END
      super.setValue(idxDeadlocksListLock, newValue);
    }
    
    public OctetString getDeadlocksListBlockedTime() {
     //--AgentGen BEGIN=deadlocksListEntry::getDeadlocksListBlockedTime
     //--AgentGen END
      return (OctetString) super.getValue(idxDeadlocksListBlockedTime);
    }  
    
    public void setDeadlocksListBlockedTime(OctetString newValue) {
     //--AgentGen BEGIN=deadlocksListEntry::setDeadlocksListBlockedTime
     //--AgentGen END
      super.setValue(idxDeadlocksListBlockedTime, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=deadlocksListEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxDeadlocksListThreadName: 
        	return getDeadlocksListThreadName();
        case idxDeadlocksListBlockedByThreadID: 
        	return getDeadlocksListBlockedByThreadID();
        case idxDeadlocksListBlockedByThreadName: 
        	return getDeadlocksListBlockedByThreadName();
        case idxDeadlocksListLock: 
        	return getDeadlocksListLock();
        case idxDeadlocksListBlockedTime: 
        	return getDeadlocksListBlockedTime();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=deadlocksListEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxDeadlocksListThreadName: 
        	setDeadlocksListThreadName((OctetString)value);
        	break;
        case idxDeadlocksListBlockedByThreadID: 
        	setDeadlocksListBlockedByThreadID((UnsignedInteger32)value);
        	break;
        case idxDeadlocksListBlockedByThreadName: 
        	setDeadlocksListBlockedByThreadName((OctetString)value);
        	break;
        case idxDeadlocksListLock: 
        	setDeadlocksListLock((OctetString)value);
        	break;
        case idxDeadlocksListBlockedTime: 
        	setDeadlocksListBlockedTime((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=deadlocksListEntry::Row
     //--AgentGen END
  }
  
  class DeadlocksListEntryRowFactory 
        implements MOTableRowFactory<DeadlocksListEntryRow>
  {
    public synchronized DeadlocksListEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      DeadlocksListEntryRow row = 
        new DeadlocksListEntryRow(index, values);
     //--AgentGen BEGIN=deadlocksListEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(DeadlocksListEntryRow row) {
     //--AgentGen BEGIN=deadlocksListEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=deadlocksListEntry::RowFactory
     //--AgentGen END
  }

  public class DeadlockViewEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=deadlockViewEntry::RowMembers
     //--AgentGen END

    public DeadlockViewEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=deadlockViewEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getDeadlockThreadLine() {
     //--AgentGen BEGIN=deadlockViewEntry::getDeadlockThreadLine
     //--AgentGen END
      return (OctetString) super.getValue(idxDeadlockThreadLine);
    }  
    
    public void setDeadlockThreadLine(OctetString newValue) {
     //--AgentGen BEGIN=deadlockViewEntry::setDeadlockThreadLine
     //--AgentGen END
      super.setValue(idxDeadlockThreadLine, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=deadlockViewEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxDeadlockThreadLine: 
        	return getDeadlockThreadLine();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=deadlockViewEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxDeadlockThreadLine: 
        	setDeadlockThreadLine((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=deadlockViewEntry::Row
     //--AgentGen END
  }
  
  class DeadlockViewEntryRowFactory 
        implements MOTableRowFactory<DeadlockViewEntryRow>
  {
    public synchronized DeadlockViewEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      DeadlockViewEntryRow row = 
        new DeadlockViewEntryRow(index, values);
     //--AgentGen BEGIN=deadlockViewEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(DeadlockViewEntryRow row) {
     //--AgentGen BEGIN=deadlockViewEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=deadlockViewEntry::RowFactory
     //--AgentGen END
  }

  public class PersistScalarEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=persistScalarEntry::RowMembers
     //--AgentGen END

    public PersistScalarEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=persistScalarEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getPersistScalarName() {
     //--AgentGen BEGIN=persistScalarEntry::getPersistScalarName
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistScalarName);
    }  
    
    public void setPersistScalarName(OctetString newValue) {
     //--AgentGen BEGIN=persistScalarEntry::setPersistScalarName
     //--AgentGen END
      super.setValue(idxPersistScalarName, newValue);
    }
    
    public OctetString getPersistScalarOID() {
     //--AgentGen BEGIN=persistScalarEntry::getPersistScalarOID
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistScalarOID);
    }  
    
    public void setPersistScalarOID(OctetString newValue) {
     //--AgentGen BEGIN=persistScalarEntry::setPersistScalarOID
     //--AgentGen END
      super.setValue(idxPersistScalarOID, newValue);
    }
    
    public OctetString getPersistScalarSyntax() {
     //--AgentGen BEGIN=persistScalarEntry::getPersistScalarSyntax
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistScalarSyntax);
    }  
    
    public void setPersistScalarSyntax(OctetString newValue) {
     //--AgentGen BEGIN=persistScalarEntry::setPersistScalarSyntax
     //--AgentGen END
      super.setValue(idxPersistScalarSyntax, newValue);
    }
    
    public OctetString getPersistScalarValue() {
     //--AgentGen BEGIN=persistScalarEntry::getPersistScalarValue
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistScalarValue);
    }  
    
    public void setPersistScalarValue(OctetString newValue) {
     //--AgentGen BEGIN=persistScalarEntry::setPersistScalarValue
     //--AgentGen END
      super.setValue(idxPersistScalarValue, newValue);
    }
    
    public Integer32 getPersistScalarAction() {
     //--AgentGen BEGIN=persistScalarEntry::getPersistScalarAction
     //--AgentGen END
      return (Integer32) super.getValue(idxPersistScalarAction);
    }  
    
    public void setPersistScalarAction(Integer32 newValue) {
     //--AgentGen BEGIN=persistScalarEntry::setPersistScalarAction
     //--AgentGen END
      super.setValue(idxPersistScalarAction, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=persistScalarEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxPersistScalarName: 
        	return getPersistScalarName();
        case idxPersistScalarOID: 
        	return getPersistScalarOID();
        case idxPersistScalarSyntax: 
        	return getPersistScalarSyntax();
        case idxPersistScalarValue: 
        	return getPersistScalarValue();
        case idxPersistScalarAction: 
        	return getPersistScalarAction();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=persistScalarEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxPersistScalarName: 
        	setPersistScalarName((OctetString)value);
        	break;
        case idxPersistScalarOID: 
        	setPersistScalarOID((OctetString)value);
        	break;
        case idxPersistScalarSyntax: 
        	setPersistScalarSyntax((OctetString)value);
        	break;
        case idxPersistScalarValue: 
        	setPersistScalarValue((OctetString)value);
        	break;
        case idxPersistScalarAction: 
        	setPersistScalarAction((Integer32)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=persistScalarEntry::Row
     //--AgentGen END
  }
  
  class PersistScalarEntryRowFactory 
        implements MOTableRowFactory<PersistScalarEntryRow>
  {
    public synchronized PersistScalarEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      PersistScalarEntryRow row = 
        new PersistScalarEntryRow(index, values);
     //--AgentGen BEGIN=persistScalarEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(PersistScalarEntryRow row) {
     //--AgentGen BEGIN=persistScalarEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=persistScalarEntry::RowFactory
     //--AgentGen END
  }

  public class PersistTableEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=persistTableEntry::RowMembers
     //--AgentGen END

    public PersistTableEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=persistTableEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getPersistTableName() {
     //--AgentGen BEGIN=persistTableEntry::getPersistTableName
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistTableName);
    }  
    
    public void setPersistTableName(OctetString newValue) {
     //--AgentGen BEGIN=persistTableEntry::setPersistTableName
     //--AgentGen END
      super.setValue(idxPersistTableName, newValue);
    }
    
    public OctetString getPersistTableOID() {
     //--AgentGen BEGIN=persistTableEntry::getPersistTableOID
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistTableOID);
    }  
    
    public void setPersistTableOID(OctetString newValue) {
     //--AgentGen BEGIN=persistTableEntry::setPersistTableOID
     //--AgentGen END
      super.setValue(idxPersistTableOID, newValue);
    }
    
    public UnsignedInteger32 getPersistTableColumnCount() {
     //--AgentGen BEGIN=persistTableEntry::getPersistTableColumnCount
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxPersistTableColumnCount);
    }  
    
    public void setPersistTableColumnCount(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=persistTableEntry::setPersistTableColumnCount
     //--AgentGen END
      super.setValue(idxPersistTableColumnCount, newValue);
    }
    
    public UnsignedInteger32 getPersistTableRowCount() {
     //--AgentGen BEGIN=persistTableEntry::getPersistTableRowCount
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxPersistTableRowCount);
    }  
    
    public void setPersistTableRowCount(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=persistTableEntry::setPersistTableRowCount
     //--AgentGen END
      super.setValue(idxPersistTableRowCount, newValue);
    }
    
    public Integer32 getPersistTableAction() {
     //--AgentGen BEGIN=persistTableEntry::getPersistTableAction
     //--AgentGen END
      return (Integer32) super.getValue(idxPersistTableAction);
    }  
    
    public void setPersistTableAction(Integer32 newValue) {
     //--AgentGen BEGIN=persistTableEntry::setPersistTableAction
     //--AgentGen END
      super.setValue(idxPersistTableAction, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=persistTableEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxPersistTableName: 
        	return getPersistTableName();
        case idxPersistTableOID: 
        	return getPersistTableOID();
        case idxPersistTableColumnCount: 
        	return getPersistTableColumnCount();
        case idxPersistTableRowCount: 
        	return getPersistTableRowCount();
        case idxPersistTableAction: 
        	return getPersistTableAction();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=persistTableEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxPersistTableName: 
        	setPersistTableName((OctetString)value);
        	break;
        case idxPersistTableOID: 
        	setPersistTableOID((OctetString)value);
        	break;
        case idxPersistTableColumnCount: 
        	setPersistTableColumnCount((UnsignedInteger32)value);
        	break;
        case idxPersistTableRowCount: 
        	setPersistTableRowCount((UnsignedInteger32)value);
        	break;
        case idxPersistTableAction: 
        	setPersistTableAction((Integer32)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=persistTableEntry::Row
     //--AgentGen END
  }
  
  class PersistTableEntryRowFactory 
        implements MOTableRowFactory<PersistTableEntryRow>
  {
    public synchronized PersistTableEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      PersistTableEntryRow row = 
        new PersistTableEntryRow(index, values);
     //--AgentGen BEGIN=persistTableEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(PersistTableEntryRow row) {
     //--AgentGen BEGIN=persistTableEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=persistTableEntry::RowFactory
     //--AgentGen END
  }

  public class PersistCellEntryRow extends DefaultMOMutableRow2PC {

     //--AgentGen BEGIN=persistCellEntry::RowMembers
     //--AgentGen END

    public PersistCellEntryRow(OID index, Variable[] values) {
      super(index, values);
     //--AgentGen BEGIN=persistCellEntry::RowConstructor
     //--AgentGen END
    }
    
    public OctetString getPersistCellTableName() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellTableName
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellTableName);
    }  
    
    public void setPersistCellTableName(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellTableName
     //--AgentGen END
      super.setValue(idxPersistCellTableName, newValue);
    }
    
    public OctetString getPersistCellTableOID() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellTableOID
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellTableOID);
    }  
    
    public void setPersistCellTableOID(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellTableOID
     //--AgentGen END
      super.setValue(idxPersistCellTableOID, newValue);
    }
    
    public OctetString getPersistCellRowOID() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellRowOID
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellRowOID);
    }  
    
    public void setPersistCellRowOID(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellRowOID
     //--AgentGen END
      super.setValue(idxPersistCellRowOID, newValue);
    }
    
    public OctetString getPersistCellColumnName() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellColumnName
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellColumnName);
    }  
    
    public void setPersistCellColumnName(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellColumnName
     //--AgentGen END
      super.setValue(idxPersistCellColumnName, newValue);
    }
    
    public UnsignedInteger32 getPersistCellColumnOID() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellColumnOID
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxPersistCellColumnOID);
    }  
    
    public void setPersistCellColumnOID(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellColumnOID
     //--AgentGen END
      super.setValue(idxPersistCellColumnOID, newValue);
    }
    
    public UnsignedInteger32 getPersistCellColumnIndex() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellColumnIndex
     //--AgentGen END
      return (UnsignedInteger32) super.getValue(idxPersistCellColumnIndex);
    }  
    
    public void setPersistCellColumnIndex(UnsignedInteger32 newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellColumnIndex
     //--AgentGen END
      super.setValue(idxPersistCellColumnIndex, newValue);
    }
    
    public OctetString getPersistCellColumnSyntax() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellColumnSyntax
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellColumnSyntax);
    }  
    
    public void setPersistCellColumnSyntax(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellColumnSyntax
     //--AgentGen END
      super.setValue(idxPersistCellColumnSyntax, newValue);
    }
    
    public OctetString getPersistCellValue() {
     //--AgentGen BEGIN=persistCellEntry::getPersistCellValue
     //--AgentGen END
      return (OctetString) super.getValue(idxPersistCellValue);
    }  
    
    public void setPersistCellValue(OctetString newValue) {
     //--AgentGen BEGIN=persistCellEntry::setPersistCellValue
     //--AgentGen END
      super.setValue(idxPersistCellValue, newValue);
    }
    
    public Variable getValue(int column) {
     //--AgentGen BEGIN=persistCellEntry::RowGetValue
     //--AgentGen END
      switch(column) {
        case idxPersistCellTableName: 
        	return getPersistCellTableName();
        case idxPersistCellTableOID: 
        	return getPersistCellTableOID();
        case idxPersistCellRowOID: 
        	return getPersistCellRowOID();
        case idxPersistCellColumnName: 
        	return getPersistCellColumnName();
        case idxPersistCellColumnOID: 
        	return getPersistCellColumnOID();
        case idxPersistCellColumnIndex: 
        	return getPersistCellColumnIndex();
        case idxPersistCellColumnSyntax: 
        	return getPersistCellColumnSyntax();
        case idxPersistCellValue: 
        	return getPersistCellValue();
        default:
          return super.getValue(column);
      }
    }
    
    public void setValue(int column, Variable value) {
     //--AgentGen BEGIN=persistCellEntry::RowSetValue
     //--AgentGen END
      switch(column) {
        case idxPersistCellTableName: 
        	setPersistCellTableName((OctetString)value);
        	break;
        case idxPersistCellTableOID: 
        	setPersistCellTableOID((OctetString)value);
        	break;
        case idxPersistCellRowOID: 
        	setPersistCellRowOID((OctetString)value);
        	break;
        case idxPersistCellColumnName: 
        	setPersistCellColumnName((OctetString)value);
        	break;
        case idxPersistCellColumnOID: 
        	setPersistCellColumnOID((UnsignedInteger32)value);
        	break;
        case idxPersistCellColumnIndex: 
        	setPersistCellColumnIndex((UnsignedInteger32)value);
        	break;
        case idxPersistCellColumnSyntax: 
        	setPersistCellColumnSyntax((OctetString)value);
        	break;
        case idxPersistCellValue: 
        	setPersistCellValue((OctetString)value);
        	break;
        default:
          super.setValue(column, value);
      }
    }

     //--AgentGen BEGIN=persistCellEntry::Row
     //--AgentGen END
  }
  
  class PersistCellEntryRowFactory 
        implements MOTableRowFactory<PersistCellEntryRow>
  {
    public synchronized PersistCellEntryRow createRow(OID index, Variable[] values)
        throws UnsupportedOperationException 
    {
      PersistCellEntryRow row = 
        new PersistCellEntryRow(index, values);
     //--AgentGen BEGIN=persistCellEntry::createRow
     //--AgentGen END
      return row;
    }
    
    public synchronized void freeRow(PersistCellEntryRow row) {
     //--AgentGen BEGIN=persistCellEntry::freeRow
     //--AgentGen END
    }

     //--AgentGen BEGIN=persistCellEntry::RowFactory
     //--AgentGen END
  }


//--AgentGen BEGIN=_METHODS
//--AgentGen END

  // Textual Definitions of MIB module FriendlySnmpMib
  protected void addTCsToFactory(MOFactory moFactory) {
   moFactory.addTextualConvention(new FriendlyRowKeepDeleteActionTC()); 
   moFactory.addTextualConvention(new FriendlyViewPolicyTC()); 
   moFactory.addTextualConvention(new FriendlyExceptionTypeTC()); 
  }


  public class FriendlyRowKeepDeleteActionTC implements TextualConvention {
    public static final int keep = 1;
    public static final int delete = 2;
  	
    public FriendlyRowKeepDeleteActionTC() {
    }

    public String getModuleName() {
      return TC_MODULE_FRIENDLY_SNMP_MIB;
    }
  	
    public String getName() {
      return TC_FRIENDLYROWKEEPDELETEACTIONTC;
    }
    
    public Variable createInitialValue() {
    	Variable v = new Integer32();
      if (v instanceof AssignableFromLong) {
        ((AssignableFromLong)v).setValue(1);
      }
    	// further modify value to comply with TC constraints here:
     //--AgentGen BEGIN=FriendlyRowKeepDeleteActionTC::createInitialValue
     //--AgentGen END
	    return v;
    }
  	
    public MOScalar createScalar(OID oid, MOAccess access, Variable value) {
      MOScalar scalar = moFactory.createScalar(oid, access, value);
      ValueConstraint vc = new EnumerationConstraint(
        new int[] { keep,
                    delete });
      scalar.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
     //--AgentGen BEGIN=FriendlyRowKeepDeleteActionTC::createScalar
     //--AgentGen END
      return scalar;
    }
  	
    public MOColumn createColumn(int columnID, int syntax, MOAccess access,
                                 Variable defaultValue, boolean mutableInService) {
      MOColumn col = moFactory.createColumn(columnID, syntax, access, 
                                            defaultValue, mutableInService);
      if (col instanceof MOMutableColumn) {
        MOMutableColumn mcol = (MOMutableColumn)col;
        ValueConstraint vc = new EnumerationConstraint(
          new int[] { keep,
                      delete });
        mcol.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
      }
     //--AgentGen BEGIN=FriendlyRowKeepDeleteActionTC::createColumn
     //--AgentGen END
      return col;      
    }
  }


  public class FriendlyViewPolicyTC implements TextualConvention {
    public static final int next = 1;
    public static final int fixed = 2;
  	
    public FriendlyViewPolicyTC() {
    }

    public String getModuleName() {
      return TC_MODULE_FRIENDLY_SNMP_MIB;
    }
  	
    public String getName() {
      return TC_FRIENDLYVIEWPOLICYTC;
    }
    
    public Variable createInitialValue() {
    	Variable v = new Integer32();
      if (v instanceof AssignableFromLong) {
        ((AssignableFromLong)v).setValue(1);
      }
    	// further modify value to comply with TC constraints here:
     //--AgentGen BEGIN=FriendlyViewPolicyTC::createInitialValue
     //--AgentGen END
	    return v;
    }
  	
    public MOScalar createScalar(OID oid, MOAccess access, Variable value) {
      MOScalar scalar = moFactory.createScalar(oid, access, value);
      ValueConstraint vc = new EnumerationConstraint(
        new int[] { next,
                    fixed });
      scalar.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
     //--AgentGen BEGIN=FriendlyViewPolicyTC::createScalar
     //--AgentGen END
      return scalar;
    }
  	
    public MOColumn createColumn(int columnID, int syntax, MOAccess access,
                                 Variable defaultValue, boolean mutableInService) {
      MOColumn col = moFactory.createColumn(columnID, syntax, access, 
                                            defaultValue, mutableInService);
      if (col instanceof MOMutableColumn) {
        MOMutableColumn mcol = (MOMutableColumn)col;
        ValueConstraint vc = new EnumerationConstraint(
          new int[] { next,
                      fixed });
        mcol.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
      }
     //--AgentGen BEGIN=FriendlyViewPolicyTC::createColumn
     //--AgentGen END
      return col;      
    }
  }


  public class FriendlyExceptionTypeTC implements TextualConvention {
    public static final int caught = 1;
    public static final int uncaught = 2;
  	
    public FriendlyExceptionTypeTC() {
    }

    public String getModuleName() {
      return TC_MODULE_FRIENDLY_SNMP_MIB;
    }
  	
    public String getName() {
      return TC_FRIENDLYEXCEPTIONTYPETC;
    }
    
    public Variable createInitialValue() {
    	Variable v = new Integer32();
      if (v instanceof AssignableFromLong) {
        ((AssignableFromLong)v).setValue(1);
      }
    	// further modify value to comply with TC constraints here:
     //--AgentGen BEGIN=FriendlyExceptionTypeTC::createInitialValue
     //--AgentGen END
	    return v;
    }
  	
    public MOScalar createScalar(OID oid, MOAccess access, Variable value) {
      MOScalar scalar = moFactory.createScalar(oid, access, value);
      ValueConstraint vc = new EnumerationConstraint(
        new int[] { caught,
                    uncaught });
      scalar.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
     //--AgentGen BEGIN=FriendlyExceptionTypeTC::createScalar
     //--AgentGen END
      return scalar;
    }
  	
    public MOColumn createColumn(int columnID, int syntax, MOAccess access,
                                 Variable defaultValue, boolean mutableInService) {
      MOColumn col = moFactory.createColumn(columnID, syntax, access, 
                                            defaultValue, mutableInService);
      if (col instanceof MOMutableColumn) {
        MOMutableColumn mcol = (MOMutableColumn)col;
        ValueConstraint vc = new EnumerationConstraint(
          new int[] { caught,
                      uncaught });
        mcol.addMOValueValidationListener(new ValueConstraintValidator(vc));                                  
      }
     //--AgentGen BEGIN=FriendlyExceptionTypeTC::createColumn
     //--AgentGen END
      return col;      
    }
  }


//--AgentGen BEGIN=_TC_CLASSES_IMPORTED_MODULES_BEGIN
//--AgentGen END

  // Textual Definitions of other MIB modules
  public void addImportedTCsToFactory(MOFactory moFactory) {
  }


//--AgentGen BEGIN=_TC_CLASSES_IMPORTED_MODULES_END
//--AgentGen END

//--AgentGen BEGIN=_CLASSES
//--AgentGen END

//--AgentGen BEGIN=_END
//--AgentGen END
}


