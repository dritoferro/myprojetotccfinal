/*
 * File: FNotification.java
 * 
 * Copyright (C) 2014 FriendlySNMP.org; All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301  USA
 * 
 * $Id: FNotification.java,v 1.25 2014/01/11 02:19:22 mg Exp $
 */
package org.friendlysnmp;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;

/**
 * Notification class. 
 * The objects of this class are generated by FriendlyPro tool 
 * and registered (inited) in an agent by framework.
 * <p>The object of this class is retrieved from MIB class for each 
 * notification node declared in a MIB. This object is required to send 
 * notification.
 * <p>NOTES. [Forum 2006-10] 
 * <br>For traps, the sender is authoritative. That is, each sender may use 
 * its own password for the same user name, because each sender MUST have 
 * a different engine ID (that's a plain SNMPv3 requirement). For informs, 
 * the receiver is authoritative. That is, there is only a single user 
 * name / password combination defined by the receiver. All senders must 
 * use this combination to successfully send an inform to that receiver. 
 * Each sender discovers the receiver's engine ID by engine ID discovery. 
 * 
 * @version $Revision: 1.25 $
 */
public class FNotification extends FNode {
    /**
     * Logger object
     */
    private static final Logger logger = LoggerFactory.getLogger(FNotification.class);
    
    /** 
     * Used only for debugging to disable notification.  
     */
    public final static boolean NOTIFY_ENABLED = true; 
    //public  final static boolean NOTIFY_ENABLED = false; 

    /**
     * Constructor
     * 
     * @param name notification name
     * @param oid notification OID
     * @param agent agent
     */
    public FNotification(String name, OID oid, AgentWorker agent) {
        super(name, oid);
        setAgent(agent);
    } // FNotification()
    
    /**
     * Sends notification without any parameters
     * <p>Exception is reported to registered with agent listener.
     */
    public void sendNotification() {
        sendNotification(null, null);
    } // sendNotification()

    /**
     * Sends notification with a single parameter
     * <p>Exception is reported to registered with agent listener.
     * 
     * @param param parameter which is sent along with notification
     */
    public void sendNotification(Object param) {
        sendNotification(new Object[] { param }, null);
    } // sendNotification()
    
    /**
     * Sends notification with parameters
     * <p>Exception is reported to registered with agent listener.
     * 
     * @param paramAll array of parameters which is sent along with notification
     */
    public void sendNotification(Object[] paramAll) {
        sendNotification(paramAll, null);
    } // sendNotification()
    
    /**
     * Sends notification with parameters declared in a MIB file. 
     * Array sizes should be the same.
     * 
     * @param paramAll array of parameters
     * @param oidAll array of parameter's OIDs
     */
    public void sendNotification(Object[] paramAll, OID[] oidAll) {
        if (agent == null  ||  !NOTIFY_ENABLED) {
            return;
        }
        List<VariableBinding> lst = new ArrayList<VariableBinding>();
        if (paramAll == null) {
            oidAll = null;
        }
        if (oidAll == null) {
            // Notification parameters are defined at runtime
            String appTitle = agent.getConfig().getAppTitle();
            lst.add(new VariableBinding(
                    new OID(FConstant.DEFAULT_OID_ROOT), 
                    new OctetString("From application: " + appTitle)));
            if (paramAll != null) {
                for (int i = 0;  i < paramAll.length;  i++) {
                    if (paramAll[i] != null) {
                        lst.add(new VariableBinding(
                                new OID(FConstant.DEFAULT_OID_ROOT), 
                                new OctetString(paramAll[i].toString())));
                    }
                }
            }
        } else {
            // Notify parameters are defined in MIB
            if (paramAll == null  ||  paramAll.length != oidAll.length) {
                if (agent != null) {
                    agent.exceptionThrown(
                        "Failure to send notification " + getFIDtoString(), 
                        new FException("Mismatch params and oid arrays length"));
                }
            }
            if (paramAll != null) {
                for (int i = 0;  i < oidAll.length;  i++) {
                    if (paramAll[i] != null) {
                        lst.add(new VariableBinding(
                                new OID(oidAll[i]), 
                                new OctetString(paramAll[i].toString())));
                    }
                }
            }
        }
        VariableBinding[] vbsAll = lst.toArray(new VariableBinding[lst.size()]);
        if (logger.isDebugEnabled()) {
            StringBuilder sb = new StringBuilder();
            sb.append("Sending notification '");
            sb.append(getName()).append("' ");
            sb.append(getOID());
            sb.append(" Params=[");
            for (VariableBinding vbs : vbsAll) {
                sb.append("\"").append(vbs).append("\"; ");
            }
            sb.append("]");
            logger.debug(sb.toString());
        }
        agent.sendNotification(getOID(), vbsAll);
    } // sendNotification()
    
} // class FNotification
